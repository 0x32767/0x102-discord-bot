Grammar:

Rule 0     S -> lines
Rule 1     stmt -> vari
Rule 2     stmt -> extref
Rule 3     stmt -> fncd
Rule 4     stmt -> importt
Rule 5     stmt -> forr
Rule 6     stmt -> ifs
Rule 7     stmt -> fncc
Rule 8     stmt -> var
Rule 9     stmt -> <empty>
Rule 10    prim -> NME * NME
Rule 11    prim -> NME / NME
Rule 12    prim -> NME - NME
Rule 13    prim -> NME + NME
Rule 14    prim -> prim * NME
Rule 15    prim -> prim / NME
Rule 16    prim -> prim - NME
Rule 17    prim -> prim + NME
Rule 18    prim -> NME * prim  [precedence=left, level=1]
Rule 19    prim -> NME / prim  [precedence=left, level=1]
Rule 20    prim -> NME - prim  [precedence=left, level=1]
Rule 21    prim -> NME + prim  [precedence=left, level=1]
Rule 22    prim -> prim * prim  [precedence=left, level=1]
Rule 23    prim -> prim / prim  [precedence=left, level=1]
Rule 24    prim -> prim - prim  [precedence=left, level=1]
Rule 25    prim -> prim + prim  [precedence=left, level=1]
Rule 26    prim -> NUM
Rule 27    prim -> STR
Rule 28    extref -> EXT STR LSB args RSB
Rule 29    args -> NME , NME
Rule 30    args -> NME , args
Rule 31    args -> NME , prim
Rule 32    args -> args , args
Rule 33    args -> args , NME
Rule 34    args -> args , prim
Rule 35    args -> prim , NME
Rule 36    args -> prim , args
Rule 37    args -> prim , prim
Rule 38    var -> LET NME = fncc
Rule 39    var -> LET NME = prim
Rule 40    vari -> NME $ = * prim  [precedence=left, level=1]
Rule 41    vari -> NME $ = / prim  [precedence=left, level=1]
Rule 42    vari -> NME $ = - prim  [precedence=left, level=1]
Rule 43    vari -> NME $ = + prim  [precedence=left, level=1]
Rule 44    vari -> NME $ = * NME
Rule 45    vari -> NME $ = / NME
Rule 46    vari -> NME $ = - NME
Rule 47    vari -> NME $ = + NME
Rule 48    fncc -> NME LOB args RCB
Rule 49    fncc -> NME LOB prim RCB
Rule 50    fncc -> NME LOB RCB
Rule 51    ifs -> IF LOB NME RCB LSB line RSB
Rule 52    ifs -> IF LOB NME RCB LSB lines RSB
Rule 53    forr -> FOR LOB fncc RCB LSB line RSB
Rule 54    forr -> FOR LOB fncc RCB LSB lines RSB
Rule 55    fncd -> FNC NME LOB args RCB LSB lines RSB
Rule 56    fncd -> FNC NME LOB NME RCB LSB lines RSB
Rule 57    fncd -> FNC NME LOB RCB LSB lines RSB
Rule 58    fncd -> FNC NME LOB RCB LSB line RSB
Rule 59    fncd -> FNC NME LOB RCB LSB RSB
Rule 60    importt -> USING STR
Rule 61    line -> stmt ;
Rule 62    lines -> line lines
Rule 63    lines -> lines line
Rule 64    lines -> line line

Unused terminals:

    ARR
    DEF
    TYP
    CDL
    CAR

Terminals, with rules where they appear:

$                    : 40 41 42 43 44 45 46 47
*                    : 10 14 18 22 40 44
+                    : 13 17 21 25 43 47
,                    : 29 30 31 32 33 34 35 36 37
-                    : 12 16 20 24 42 46
/                    : 11 15 19 23 41 45
;                    : 61
=                    : 38 39 40 41 42 43 44 45 46 47
ARR                  : 
CAR                  : 
CDL                  : 
DEF                  : 
EXT                  : 28
FNC                  : 55 56 57 58 59
FOR                  : 53 54
IF                   : 51 52
LET                  : 38 39
LOB                  : 48 49 50 51 52 53 54 55 56 57 58 59
LSB                  : 28 51 52 53 54 55 56 57 58 59
NME                  : 10 10 11 11 12 12 13 13 14 15 16 17 18 19 20 21 29 29 30 31 33 35 38 39 40 41 42 43 44 44 45 45 46 46 47 47 48 49 50 51 52 55 56 56 57 58 59
NUM                  : 26
RCB                  : 48 49 50 51 52 53 54 55 56 57 58 59
RSB                  : 28 51 52 53 54 55 56 57 58 59
STR                  : 27 28 60
TYP                  : 
USING                : 60
error                : 

Nonterminals, with rules where they appear:

args                 : 28 30 32 32 33 34 36 48 55
extref               : 2
fncc                 : 7 38 53 54
fncd                 : 3
forr                 : 5
ifs                  : 6
importt              : 4
line                 : 51 53 58 62 63 64 64
lines                : 52 54 55 56 57 62 63 0
prim                 : 14 15 16 17 18 19 20 21 22 22 23 23 24 24 25 25 31 34 35 36 37 37 39 40 41 42 43 49
stmt                 : 61
var                  : 8
vari                 : 1


state 0

    (0) S -> . lines
    (62) lines -> . line lines
    (63) lines -> . lines line
    (64) lines -> . line line
    (61) line -> . stmt ;
    (1) stmt -> . vari
    (2) stmt -> . extref
    (3) stmt -> . fncd
    (4) stmt -> . importt
    (5) stmt -> . forr
    (6) stmt -> . ifs
    (7) stmt -> . fncc
    (8) stmt -> . var
    (9) stmt -> .
    (40) vari -> . NME $ = * prim
    (41) vari -> . NME $ = / prim
    (42) vari -> . NME $ = - prim
    (43) vari -> . NME $ = + prim
    (44) vari -> . NME $ = * NME
    (45) vari -> . NME $ = / NME
    (46) vari -> . NME $ = - NME
    (47) vari -> . NME $ = + NME
    (28) extref -> . EXT STR LSB args RSB
    (55) fncd -> . FNC NME LOB args RCB LSB lines RSB
    (56) fncd -> . FNC NME LOB NME RCB LSB lines RSB
    (57) fncd -> . FNC NME LOB RCB LSB lines RSB
    (58) fncd -> . FNC NME LOB RCB LSB line RSB
    (59) fncd -> . FNC NME LOB RCB LSB RSB
    (60) importt -> . USING STR
    (53) forr -> . FOR LOB fncc RCB LSB line RSB
    (54) forr -> . FOR LOB fncc RCB LSB lines RSB
    (51) ifs -> . IF LOB NME RCB LSB line RSB
    (52) ifs -> . IF LOB NME RCB LSB lines RSB
    (48) fncc -> . NME LOB args RCB
    (49) fncc -> . NME LOB prim RCB
    (50) fncc -> . NME LOB RCB
    (38) var -> . LET NME = fncc
    (39) var -> . LET NME = prim
    ;               reduce using rule 9 (stmt -> .)
    NME             shift and go to state 12
    EXT             shift and go to state 13
    FNC             shift and go to state 14
    USING           shift and go to state 15
    FOR             shift and go to state 16
    IF              shift and go to state 17
    LET             shift and go to state 18

    lines                          shift and go to state 1
    line                           shift and go to state 2
    stmt                           shift and go to state 3
    vari                           shift and go to state 4
    extref                         shift and go to state 5
    fncd                           shift and go to state 6
    importt                        shift and go to state 7
    forr                           shift and go to state 8
    ifs                            shift and go to state 9
    fncc                           shift and go to state 10
    var                            shift and go to state 11

state 1

    (0) S -> lines .
    (63) lines -> lines . line
    (61) line -> . stmt ;
    (1) stmt -> . vari
    (2) stmt -> . extref
    (3) stmt -> . fncd
    (4) stmt -> . importt
    (5) stmt -> . forr
    (6) stmt -> . ifs
    (7) stmt -> . fncc
    (8) stmt -> . var
    (9) stmt -> .
    (40) vari -> . NME $ = * prim
    (41) vari -> . NME $ = / prim
    (42) vari -> . NME $ = - prim
    (43) vari -> . NME $ = + prim
    (44) vari -> . NME $ = * NME
    (45) vari -> . NME $ = / NME
    (46) vari -> . NME $ = - NME
    (47) vari -> . NME $ = + NME
    (28) extref -> . EXT STR LSB args RSB
    (55) fncd -> . FNC NME LOB args RCB LSB lines RSB
    (56) fncd -> . FNC NME LOB NME RCB LSB lines RSB
    (57) fncd -> . FNC NME LOB RCB LSB lines RSB
    (58) fncd -> . FNC NME LOB RCB LSB line RSB
    (59) fncd -> . FNC NME LOB RCB LSB RSB
    (60) importt -> . USING STR
    (53) forr -> . FOR LOB fncc RCB LSB line RSB
    (54) forr -> . FOR LOB fncc RCB LSB lines RSB
    (51) ifs -> . IF LOB NME RCB LSB line RSB
    (52) ifs -> . IF LOB NME RCB LSB lines RSB
    (48) fncc -> . NME LOB args RCB
    (49) fncc -> . NME LOB prim RCB
    (50) fncc -> . NME LOB RCB
    (38) var -> . LET NME = fncc
    (39) var -> . LET NME = prim
    ;               reduce using rule 9 (stmt -> .)
    NME             shift and go to state 12
    EXT             shift and go to state 13
    FNC             shift and go to state 14
    USING           shift and go to state 15
    FOR             shift and go to state 16
    IF              shift and go to state 17
    LET             shift and go to state 18

    line                           shift and go to state 19
    stmt                           shift and go to state 3
    vari                           shift and go to state 4
    extref                         shift and go to state 5
    fncd                           shift and go to state 6
    importt                        shift and go to state 7
    forr                           shift and go to state 8
    ifs                            shift and go to state 9
    fncc                           shift and go to state 10
    var                            shift and go to state 11

state 2

    (62) lines -> line . lines
    (64) lines -> line . line
    (62) lines -> . line lines
    (63) lines -> . lines line
    (64) lines -> . line line
    (61) line -> . stmt ;
    (1) stmt -> . vari
    (2) stmt -> . extref
    (3) stmt -> . fncd
    (4) stmt -> . importt
    (5) stmt -> . forr
    (6) stmt -> . ifs
    (7) stmt -> . fncc
    (8) stmt -> . var
    (9) stmt -> .
    (40) vari -> . NME $ = * prim
    (41) vari -> . NME $ = / prim
    (42) vari -> . NME $ = - prim
    (43) vari -> . NME $ = + prim
    (44) vari -> . NME $ = * NME
    (45) vari -> . NME $ = / NME
    (46) vari -> . NME $ = - NME
    (47) vari -> . NME $ = + NME
    (28) extref -> . EXT STR LSB args RSB
    (55) fncd -> . FNC NME LOB args RCB LSB lines RSB
    (56) fncd -> . FNC NME LOB NME RCB LSB lines RSB
    (57) fncd -> . FNC NME LOB RCB LSB lines RSB
    (58) fncd -> . FNC NME LOB RCB LSB line RSB
    (59) fncd -> . FNC NME LOB RCB LSB RSB
    (60) importt -> . USING STR
    (53) forr -> . FOR LOB fncc RCB LSB line RSB
    (54) forr -> . FOR LOB fncc RCB LSB lines RSB
    (51) ifs -> . IF LOB NME RCB LSB line RSB
    (52) ifs -> . IF LOB NME RCB LSB lines RSB
    (48) fncc -> . NME LOB args RCB
    (49) fncc -> . NME LOB prim RCB
    (50) fncc -> . NME LOB RCB
    (38) var -> . LET NME = fncc
    (39) var -> . LET NME = prim
    ;               reduce using rule 9 (stmt -> .)
    NME             shift and go to state 12
    EXT             shift and go to state 13
    FNC             shift and go to state 14
    USING           shift and go to state 15
    FOR             shift and go to state 16
    IF              shift and go to state 17
    LET             shift and go to state 18

    line                           shift and go to state 20
    lines                          shift and go to state 21
    stmt                           shift and go to state 3
    vari                           shift and go to state 4
    extref                         shift and go to state 5
    fncd                           shift and go to state 6
    importt                        shift and go to state 7
    forr                           shift and go to state 8
    ifs                            shift and go to state 9
    fncc                           shift and go to state 10
    var                            shift and go to state 11

state 3

    (61) line -> stmt . ;
    ;               shift and go to state 22


state 4

    (1) stmt -> vari .
    ;               reduce using rule 1 (stmt -> vari .)


state 5

    (2) stmt -> extref .
    ;               reduce using rule 2 (stmt -> extref .)


state 6

    (3) stmt -> fncd .
    ;               reduce using rule 3 (stmt -> fncd .)


state 7

    (4) stmt -> importt .
    ;               reduce using rule 4 (stmt -> importt .)


state 8

    (5) stmt -> forr .
    ;               reduce using rule 5 (stmt -> forr .)


state 9

    (6) stmt -> ifs .
    ;               reduce using rule 6 (stmt -> ifs .)


state 10

    (7) stmt -> fncc .
    ;               reduce using rule 7 (stmt -> fncc .)


state 11

    (8) stmt -> var .
    ;               reduce using rule 8 (stmt -> var .)


state 12

    (40) vari -> NME . $ = * prim
    (41) vari -> NME . $ = / prim
    (42) vari -> NME . $ = - prim
    (43) vari -> NME . $ = + prim
    (44) vari -> NME . $ = * NME
    (45) vari -> NME . $ = / NME
    (46) vari -> NME . $ = - NME
    (47) vari -> NME . $ = + NME
    (48) fncc -> NME . LOB args RCB
    (49) fncc -> NME . LOB prim RCB
    (50) fncc -> NME . LOB RCB
    $               shift and go to state 23
    LOB             shift and go to state 24


state 13

    (28) extref -> EXT . STR LSB args RSB
    STR             shift and go to state 25


state 14

    (55) fncd -> FNC . NME LOB args RCB LSB lines RSB
    (56) fncd -> FNC . NME LOB NME RCB LSB lines RSB
    (57) fncd -> FNC . NME LOB RCB LSB lines RSB
    (58) fncd -> FNC . NME LOB RCB LSB line RSB
    (59) fncd -> FNC . NME LOB RCB LSB RSB
    NME             shift and go to state 26


state 15

    (60) importt -> USING . STR
    STR             shift and go to state 27


state 16

    (53) forr -> FOR . LOB fncc RCB LSB line RSB
    (54) forr -> FOR . LOB fncc RCB LSB lines RSB
    LOB             shift and go to state 28


state 17

    (51) ifs -> IF . LOB NME RCB LSB line RSB
    (52) ifs -> IF . LOB NME RCB LSB lines RSB
    LOB             shift and go to state 29


state 18

    (38) var -> LET . NME = fncc
    (39) var -> LET . NME = prim
    NME             shift and go to state 30


state 19

    (63) lines -> lines line .
    NME             reduce using rule 63 (lines -> lines line .)
    EXT             reduce using rule 63 (lines -> lines line .)
    FNC             reduce using rule 63 (lines -> lines line .)
    USING           reduce using rule 63 (lines -> lines line .)
    FOR             reduce using rule 63 (lines -> lines line .)
    IF              reduce using rule 63 (lines -> lines line .)
    LET             reduce using rule 63 (lines -> lines line .)
    $end            reduce using rule 63 (lines -> lines line .)
    ;               reduce using rule 63 (lines -> lines line .)
    RSB             reduce using rule 63 (lines -> lines line .)


state 20

    (64) lines -> line line .
    (62) lines -> line . lines
    (64) lines -> line . line
    (62) lines -> . line lines
    (63) lines -> . lines line
    (64) lines -> . line line
    (61) line -> . stmt ;
    (1) stmt -> . vari
    (2) stmt -> . extref
    (3) stmt -> . fncd
    (4) stmt -> . importt
    (5) stmt -> . forr
    (6) stmt -> . ifs
    (7) stmt -> . fncc
    (8) stmt -> . var
    (9) stmt -> .
    (40) vari -> . NME $ = * prim
    (41) vari -> . NME $ = / prim
    (42) vari -> . NME $ = - prim
    (43) vari -> . NME $ = + prim
    (44) vari -> . NME $ = * NME
    (45) vari -> . NME $ = / NME
    (46) vari -> . NME $ = - NME
    (47) vari -> . NME $ = + NME
    (28) extref -> . EXT STR LSB args RSB
    (55) fncd -> . FNC NME LOB args RCB LSB lines RSB
    (56) fncd -> . FNC NME LOB NME RCB LSB lines RSB
    (57) fncd -> . FNC NME LOB RCB LSB lines RSB
    (58) fncd -> . FNC NME LOB RCB LSB line RSB
    (59) fncd -> . FNC NME LOB RCB LSB RSB
    (60) importt -> . USING STR
    (53) forr -> . FOR LOB fncc RCB LSB line RSB
    (54) forr -> . FOR LOB fncc RCB LSB lines RSB
    (51) ifs -> . IF LOB NME RCB LSB line RSB
    (52) ifs -> . IF LOB NME RCB LSB lines RSB
    (48) fncc -> . NME LOB args RCB
    (49) fncc -> . NME LOB prim RCB
    (50) fncc -> . NME LOB RCB
    (38) var -> . LET NME = fncc
    (39) var -> . LET NME = prim
  ! reduce/reduce conflict for ; resolved using rule 9 (stmt -> .)
  ! shift/reduce conflict for NME resolved as shift
  ! shift/reduce conflict for EXT resolved as shift
  ! shift/reduce conflict for FNC resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for LET resolved as shift
    $end            reduce using rule 64 (lines -> line line .)
    RSB             reduce using rule 64 (lines -> line line .)
    ;               reduce using rule 9 (stmt -> .)
    NME             shift and go to state 12
    EXT             shift and go to state 13
    FNC             shift and go to state 14
    USING           shift and go to state 15
    FOR             shift and go to state 16
    IF              shift and go to state 17
    LET             shift and go to state 18

    line                           shift and go to state 20
    lines                          shift and go to state 21
    stmt                           shift and go to state 3
    vari                           shift and go to state 4
    extref                         shift and go to state 5
    fncd                           shift and go to state 6
    importt                        shift and go to state 7
    forr                           shift and go to state 8
    ifs                            shift and go to state 9
    fncc                           shift and go to state 10
    var                            shift and go to state 11

state 21

    (62) lines -> line lines .
    (63) lines -> lines . line
    (61) line -> . stmt ;
    (1) stmt -> . vari
    (2) stmt -> . extref
    (3) stmt -> . fncd
    (4) stmt -> . importt
    (5) stmt -> . forr
    (6) stmt -> . ifs
    (7) stmt -> . fncc
    (8) stmt -> . var
    (9) stmt -> .
    (40) vari -> . NME $ = * prim
    (41) vari -> . NME $ = / prim
    (42) vari -> . NME $ = - prim
    (43) vari -> . NME $ = + prim
    (44) vari -> . NME $ = * NME
    (45) vari -> . NME $ = / NME
    (46) vari -> . NME $ = - NME
    (47) vari -> . NME $ = + NME
    (28) extref -> . EXT STR LSB args RSB
    (55) fncd -> . FNC NME LOB args RCB LSB lines RSB
    (56) fncd -> . FNC NME LOB NME RCB LSB lines RSB
    (57) fncd -> . FNC NME LOB RCB LSB lines RSB
    (58) fncd -> . FNC NME LOB RCB LSB line RSB
    (59) fncd -> . FNC NME LOB RCB LSB RSB
    (60) importt -> . USING STR
    (53) forr -> . FOR LOB fncc RCB LSB line RSB
    (54) forr -> . FOR LOB fncc RCB LSB lines RSB
    (51) ifs -> . IF LOB NME RCB LSB line RSB
    (52) ifs -> . IF LOB NME RCB LSB lines RSB
    (48) fncc -> . NME LOB args RCB
    (49) fncc -> . NME LOB prim RCB
    (50) fncc -> . NME LOB RCB
    (38) var -> . LET NME = fncc
    (39) var -> . LET NME = prim
  ! reduce/reduce conflict for ; resolved using rule 9 (stmt -> .)
  ! shift/reduce conflict for NME resolved as shift
  ! shift/reduce conflict for EXT resolved as shift
  ! shift/reduce conflict for FNC resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for LET resolved as shift
    $end            reduce using rule 62 (lines -> line lines .)
    RSB             reduce using rule 62 (lines -> line lines .)
    ;               reduce using rule 9 (stmt -> .)
    NME             shift and go to state 12
    EXT             shift and go to state 13
    FNC             shift and go to state 14
    USING           shift and go to state 15
    FOR             shift and go to state 16
    IF              shift and go to state 17
    LET             shift and go to state 18

    line                           shift and go to state 19
    stmt                           shift and go to state 3
    vari                           shift and go to state 4
    extref                         shift and go to state 5
    fncd                           shift and go to state 6
    importt                        shift and go to state 7
    forr                           shift and go to state 8
    ifs                            shift and go to state 9
    fncc                           shift and go to state 10
    var                            shift and go to state 11

state 22

    (61) line -> stmt ; .
    NME             reduce using rule 61 (line -> stmt ; .)
    EXT             reduce using rule 61 (line -> stmt ; .)
    FNC             reduce using rule 61 (line -> stmt ; .)
    USING           reduce using rule 61 (line -> stmt ; .)
    FOR             reduce using rule 61 (line -> stmt ; .)
    IF              reduce using rule 61 (line -> stmt ; .)
    LET             reduce using rule 61 (line -> stmt ; .)
    ;               reduce using rule 61 (line -> stmt ; .)
    $end            reduce using rule 61 (line -> stmt ; .)
    RSB             reduce using rule 61 (line -> stmt ; .)


state 23

    (40) vari -> NME $ . = * prim
    (41) vari -> NME $ . = / prim
    (42) vari -> NME $ . = - prim
    (43) vari -> NME $ . = + prim
    (44) vari -> NME $ . = * NME
    (45) vari -> NME $ . = / NME
    (46) vari -> NME $ . = - NME
    (47) vari -> NME $ . = + NME
    =               shift and go to state 31


state 24

    (48) fncc -> NME LOB . args RCB
    (49) fncc -> NME LOB . prim RCB
    (50) fncc -> NME LOB . RCB
    (29) args -> . NME , NME
    (30) args -> . NME , args
    (31) args -> . NME , prim
    (32) args -> . args , args
    (33) args -> . args , NME
    (34) args -> . args , prim
    (35) args -> . prim , NME
    (36) args -> . prim , args
    (37) args -> . prim , prim
    (10) prim -> . NME * NME
    (11) prim -> . NME / NME
    (12) prim -> . NME - NME
    (13) prim -> . NME + NME
    (14) prim -> . prim * NME
    (15) prim -> . prim / NME
    (16) prim -> . prim - NME
    (17) prim -> . prim + NME
    (18) prim -> . NME * prim
    (19) prim -> . NME / prim
    (20) prim -> . NME - prim
    (21) prim -> . NME + prim
    (22) prim -> . prim * prim
    (23) prim -> . prim / prim
    (24) prim -> . prim - prim
    (25) prim -> . prim + prim
    (26) prim -> . NUM
    (27) prim -> . STR
    RCB             shift and go to state 34
    NME             shift and go to state 32
    NUM             shift and go to state 36
    STR             shift and go to state 37

    args                           shift and go to state 33
    prim                           shift and go to state 35

state 25

    (28) extref -> EXT STR . LSB args RSB
    LSB             shift and go to state 38


state 26

    (55) fncd -> FNC NME . LOB args RCB LSB lines RSB
    (56) fncd -> FNC NME . LOB NME RCB LSB lines RSB
    (57) fncd -> FNC NME . LOB RCB LSB lines RSB
    (58) fncd -> FNC NME . LOB RCB LSB line RSB
    (59) fncd -> FNC NME . LOB RCB LSB RSB
    LOB             shift and go to state 39


state 27

    (60) importt -> USING STR .
    ;               reduce using rule 60 (importt -> USING STR .)


state 28

    (53) forr -> FOR LOB . fncc RCB LSB line RSB
    (54) forr -> FOR LOB . fncc RCB LSB lines RSB
    (48) fncc -> . NME LOB args RCB
    (49) fncc -> . NME LOB prim RCB
    (50) fncc -> . NME LOB RCB
    NME             shift and go to state 41

    fncc                           shift and go to state 40

state 29

    (51) ifs -> IF LOB . NME RCB LSB line RSB
    (52) ifs -> IF LOB . NME RCB LSB lines RSB
    NME             shift and go to state 42


state 30

    (38) var -> LET NME . = fncc
    (39) var -> LET NME . = prim
    =               shift and go to state 43


state 31

    (40) vari -> NME $ = . * prim
    (41) vari -> NME $ = . / prim
    (42) vari -> NME $ = . - prim
    (43) vari -> NME $ = . + prim
    (44) vari -> NME $ = . * NME
    (45) vari -> NME $ = . / NME
    (46) vari -> NME $ = . - NME
    (47) vari -> NME $ = . + NME
    *               shift and go to state 44
    /               shift and go to state 45
    -               shift and go to state 46
    +               shift and go to state 47


state 32

    (29) args -> NME . , NME
    (30) args -> NME . , args
    (31) args -> NME . , prim
    (10) prim -> NME . * NME
    (11) prim -> NME . / NME
    (12) prim -> NME . - NME
    (13) prim -> NME . + NME
    (18) prim -> NME . * prim
    (19) prim -> NME . / prim
    (20) prim -> NME . - prim
    (21) prim -> NME . + prim
    ,               shift and go to state 48
    *               shift and go to state 49
    /               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52


state 33

    (48) fncc -> NME LOB args . RCB
    (32) args -> args . , args
    (33) args -> args . , NME
    (34) args -> args . , prim
    RCB             shift and go to state 53
    ,               shift and go to state 54


state 34

    (50) fncc -> NME LOB RCB .
    ;               reduce using rule 50 (fncc -> NME LOB RCB .)
    RCB             reduce using rule 50 (fncc -> NME LOB RCB .)


state 35

    (49) fncc -> NME LOB prim . RCB
    (35) args -> prim . , NME
    (36) args -> prim . , args
    (37) args -> prim . , prim
    (14) prim -> prim . * NME
    (15) prim -> prim . / NME
    (16) prim -> prim . - NME
    (17) prim -> prim . + NME
    (22) prim -> prim . * prim
    (23) prim -> prim . / prim
    (24) prim -> prim . - prim
    (25) prim -> prim . + prim
    RCB             shift and go to state 55
    ,               shift and go to state 56
    *               shift and go to state 57
    /               shift and go to state 58
    -               shift and go to state 59
    +               shift and go to state 60


state 36

    (26) prim -> NUM .
    RCB             reduce using rule 26 (prim -> NUM .)
    ,               reduce using rule 26 (prim -> NUM .)
    *               reduce using rule 26 (prim -> NUM .)
    /               reduce using rule 26 (prim -> NUM .)
    -               reduce using rule 26 (prim -> NUM .)
    +               reduce using rule 26 (prim -> NUM .)
    ;               reduce using rule 26 (prim -> NUM .)
    RSB             reduce using rule 26 (prim -> NUM .)


state 37

    (27) prim -> STR .
    RCB             reduce using rule 27 (prim -> STR .)
    ,               reduce using rule 27 (prim -> STR .)
    *               reduce using rule 27 (prim -> STR .)
    /               reduce using rule 27 (prim -> STR .)
    -               reduce using rule 27 (prim -> STR .)
    +               reduce using rule 27 (prim -> STR .)
    ;               reduce using rule 27 (prim -> STR .)
    RSB             reduce using rule 27 (prim -> STR .)


state 38

    (28) extref -> EXT STR LSB . args RSB
    (29) args -> . NME , NME
    (30) args -> . NME , args
    (31) args -> . NME , prim
    (32) args -> . args , args
    (33) args -> . args , NME
    (34) args -> . args , prim
    (35) args -> . prim , NME
    (36) args -> . prim , args
    (37) args -> . prim , prim
    (10) prim -> . NME * NME
    (11) prim -> . NME / NME
    (12) prim -> . NME - NME
    (13) prim -> . NME + NME
    (14) prim -> . prim * NME
    (15) prim -> . prim / NME
    (16) prim -> . prim - NME
    (17) prim -> . prim + NME
    (18) prim -> . NME * prim
    (19) prim -> . NME / prim
    (20) prim -> . NME - prim
    (21) prim -> . NME + prim
    (22) prim -> . prim * prim
    (23) prim -> . prim / prim
    (24) prim -> . prim - prim
    (25) prim -> . prim + prim
    (26) prim -> . NUM
    (27) prim -> . STR
    NME             shift and go to state 32
    NUM             shift and go to state 36
    STR             shift and go to state 37

    args                           shift and go to state 61
    prim                           shift and go to state 62

state 39

    (55) fncd -> FNC NME LOB . args RCB LSB lines RSB
    (56) fncd -> FNC NME LOB . NME RCB LSB lines RSB
    (57) fncd -> FNC NME LOB . RCB LSB lines RSB
    (58) fncd -> FNC NME LOB . RCB LSB line RSB
    (59) fncd -> FNC NME LOB . RCB LSB RSB
    (29) args -> . NME , NME
    (30) args -> . NME , args
    (31) args -> . NME , prim
    (32) args -> . args , args
    (33) args -> . args , NME
    (34) args -> . args , prim
    (35) args -> . prim , NME
    (36) args -> . prim , args
    (37) args -> . prim , prim
    (10) prim -> . NME * NME
    (11) prim -> . NME / NME
    (12) prim -> . NME - NME
    (13) prim -> . NME + NME
    (14) prim -> . prim * NME
    (15) prim -> . prim / NME
    (16) prim -> . prim - NME
    (17) prim -> . prim + NME
    (18) prim -> . NME * prim
    (19) prim -> . NME / prim
    (20) prim -> . NME - prim
    (21) prim -> . NME + prim
    (22) prim -> . prim * prim
    (23) prim -> . prim / prim
    (24) prim -> . prim - prim
    (25) prim -> . prim + prim
    (26) prim -> . NUM
    (27) prim -> . STR
    NME             shift and go to state 63
    RCB             shift and go to state 65
    NUM             shift and go to state 36
    STR             shift and go to state 37

    args                           shift and go to state 64
    prim                           shift and go to state 62

state 40

    (53) forr -> FOR LOB fncc . RCB LSB line RSB
    (54) forr -> FOR LOB fncc . RCB LSB lines RSB
    RCB             shift and go to state 66


state 41

    (48) fncc -> NME . LOB args RCB
    (49) fncc -> NME . LOB prim RCB
    (50) fncc -> NME . LOB RCB
    LOB             shift and go to state 24


state 42

    (51) ifs -> IF LOB NME . RCB LSB line RSB
    (52) ifs -> IF LOB NME . RCB LSB lines RSB
    RCB             shift and go to state 67


state 43

    (38) var -> LET NME = . fncc
    (39) var -> LET NME = . prim
    (48) fncc -> . NME LOB args RCB
    (49) fncc -> . NME LOB prim RCB
    (50) fncc -> . NME LOB RCB
    (10) prim -> . NME * NME
    (11) prim -> . NME / NME
    (12) prim -> . NME - NME
    (13) prim -> . NME + NME
    (14) prim -> . prim * NME
    (15) prim -> . prim / NME
    (16) prim -> . prim - NME
    (17) prim -> . prim + NME
    (18) prim -> . NME * prim
    (19) prim -> . NME / prim
    (20) prim -> . NME - prim
    (21) prim -> . NME + prim
    (22) prim -> . prim * prim
    (23) prim -> . prim / prim
    (24) prim -> . prim - prim
    (25) prim -> . prim + prim
    (26) prim -> . NUM
    (27) prim -> . STR
    NME             shift and go to state 68
    NUM             shift and go to state 36
    STR             shift and go to state 37

    fncc                           shift and go to state 69
    prim                           shift and go to state 70

state 44

    (40) vari -> NME $ = * . prim
    (44) vari -> NME $ = * . NME
    (10) prim -> . NME * NME
    (11) prim -> . NME / NME
    (12) prim -> . NME - NME
    (13) prim -> . NME + NME
    (14) prim -> . prim * NME
    (15) prim -> . prim / NME
    (16) prim -> . prim - NME
    (17) prim -> . prim + NME
    (18) prim -> . NME * prim
    (19) prim -> . NME / prim
    (20) prim -> . NME - prim
    (21) prim -> . NME + prim
    (22) prim -> . prim * prim
    (23) prim -> . prim / prim
    (24) prim -> . prim - prim
    (25) prim -> . prim + prim
    (26) prim -> . NUM
    (27) prim -> . STR
    NME             shift and go to state 71
    NUM             shift and go to state 36
    STR             shift and go to state 37

    prim                           shift and go to state 72

state 45

    (41) vari -> NME $ = / . prim
    (45) vari -> NME $ = / . NME
    (10) prim -> . NME * NME
    (11) prim -> . NME / NME
    (12) prim -> . NME - NME
    (13) prim -> . NME + NME
    (14) prim -> . prim * NME
    (15) prim -> . prim / NME
    (16) prim -> . prim - NME
    (17) prim -> . prim + NME
    (18) prim -> . NME * prim
    (19) prim -> . NME / prim
    (20) prim -> . NME - prim
    (21) prim -> . NME + prim
    (22) prim -> . prim * prim
    (23) prim -> . prim / prim
    (24) prim -> . prim - prim
    (25) prim -> . prim + prim
    (26) prim -> . NUM
    (27) prim -> . STR
    NME             shift and go to state 73
    NUM             shift and go to state 36
    STR             shift and go to state 37

    prim                           shift and go to state 74

state 46

    (42) vari -> NME $ = - . prim
    (46) vari -> NME $ = - . NME
    (10) prim -> . NME * NME
    (11) prim -> . NME / NME
    (12) prim -> . NME - NME
    (13) prim -> . NME + NME
    (14) prim -> . prim * NME
    (15) prim -> . prim / NME
    (16) prim -> . prim - NME
    (17) prim -> . prim + NME
    (18) prim -> . NME * prim
    (19) prim -> . NME / prim
    (20) prim -> . NME - prim
    (21) prim -> . NME + prim
    (22) prim -> . prim * prim
    (23) prim -> . prim / prim
    (24) prim -> . prim - prim
    (25) prim -> . prim + prim
    (26) prim -> . NUM
    (27) prim -> . STR
    NME             shift and go to state 75
    NUM             shift and go to state 36
    STR             shift and go to state 37

    prim                           shift and go to state 76

state 47

    (43) vari -> NME $ = + . prim
    (47) vari -> NME $ = + . NME
    (10) prim -> . NME * NME
    (11) prim -> . NME / NME
    (12) prim -> . NME - NME
    (13) prim -> . NME + NME
    (14) prim -> . prim * NME
    (15) prim -> . prim / NME
    (16) prim -> . prim - NME
    (17) prim -> . prim + NME
    (18) prim -> . NME * prim
    (19) prim -> . NME / prim
    (20) prim -> . NME - prim
    (21) prim -> . NME + prim
    (22) prim -> . prim * prim
    (23) prim -> . prim / prim
    (24) prim -> . prim - prim
    (25) prim -> . prim + prim
    (26) prim -> . NUM
    (27) prim -> . STR
    NME             shift and go to state 77
    NUM             shift and go to state 36
    STR             shift and go to state 37

    prim                           shift and go to state 78

state 48

    (29) args -> NME , . NME
    (30) args -> NME , . args
    (31) args -> NME , . prim
    (29) args -> . NME , NME
    (30) args -> . NME , args
    (31) args -> . NME , prim
    (32) args -> . args , args
    (33) args -> . args , NME
    (34) args -> . args , prim
    (35) args -> . prim , NME
    (36) args -> . prim , args
    (37) args -> . prim , prim
    (10) prim -> . NME * NME
    (11) prim -> . NME / NME
    (12) prim -> . NME - NME
    (13) prim -> . NME + NME
    (14) prim -> . prim * NME
    (15) prim -> . prim / NME
    (16) prim -> . prim - NME
    (17) prim -> . prim + NME
    (18) prim -> . NME * prim
    (19) prim -> . NME / prim
    (20) prim -> . NME - prim
    (21) prim -> . NME + prim
    (22) prim -> . prim * prim
    (23) prim -> . prim / prim
    (24) prim -> . prim - prim
    (25) prim -> . prim + prim
    (26) prim -> . NUM
    (27) prim -> . STR
    NME             shift and go to state 79
    NUM             shift and go to state 36
    STR             shift and go to state 37

    args                           shift and go to state 80
    prim                           shift and go to state 81

state 49

    (10) prim -> NME * . NME
    (18) prim -> NME * . prim
    (10) prim -> . NME * NME
    (11) prim -> . NME / NME
    (12) prim -> . NME - NME
    (13) prim -> . NME + NME
    (14) prim -> . prim * NME
    (15) prim -> . prim / NME
    (16) prim -> . prim - NME
    (17) prim -> . prim + NME
    (18) prim -> . NME * prim
    (19) prim -> . NME / prim
    (20) prim -> . NME - prim
    (21) prim -> . NME + prim
    (22) prim -> . prim * prim
    (23) prim -> . prim / prim
    (24) prim -> . prim - prim
    (25) prim -> . prim + prim
    (26) prim -> . NUM
    (27) prim -> . STR
    NME             shift and go to state 82
    NUM             shift and go to state 36
    STR             shift and go to state 37

    prim                           shift and go to state 83

state 50

    (11) prim -> NME / . NME
    (19) prim -> NME / . prim
    (10) prim -> . NME * NME
    (11) prim -> . NME / NME
    (12) prim -> . NME - NME
    (13) prim -> . NME + NME
    (14) prim -> . prim * NME
    (15) prim -> . prim / NME
    (16) prim -> . prim - NME
    (17) prim -> . prim + NME
    (18) prim -> . NME * prim
    (19) prim -> . NME / prim
    (20) prim -> . NME - prim
    (21) prim -> . NME + prim
    (22) prim -> . prim * prim
    (23) prim -> . prim / prim
    (24) prim -> . prim - prim
    (25) prim -> . prim + prim
    (26) prim -> . NUM
    (27) prim -> . STR
    NME             shift and go to state 84
    NUM             shift and go to state 36
    STR             shift and go to state 37

    prim                           shift and go to state 85

state 51

    (12) prim -> NME - . NME
    (20) prim -> NME - . prim
    (10) prim -> . NME * NME
    (11) prim -> . NME / NME
    (12) prim -> . NME - NME
    (13) prim -> . NME + NME
    (14) prim -> . prim * NME
    (15) prim -> . prim / NME
    (16) prim -> . prim - NME
    (17) prim -> . prim + NME
    (18) prim -> . NME * prim
    (19) prim -> . NME / prim
    (20) prim -> . NME - prim
    (21) prim -> . NME + prim
    (22) prim -> . prim * prim
    (23) prim -> . prim / prim
    (24) prim -> . prim - prim
    (25) prim -> . prim + prim
    (26) prim -> . NUM
    (27) prim -> . STR
    NME             shift and go to state 86
    NUM             shift and go to state 36
    STR             shift and go to state 37

    prim                           shift and go to state 87

state 52

    (13) prim -> NME + . NME
    (21) prim -> NME + . prim
    (10) prim -> . NME * NME
    (11) prim -> . NME / NME
    (12) prim -> . NME - NME
    (13) prim -> . NME + NME
    (14) prim -> . prim * NME
    (15) prim -> . prim / NME
    (16) prim -> . prim - NME
    (17) prim -> . prim + NME
    (18) prim -> . NME * prim
    (19) prim -> . NME / prim
    (20) prim -> . NME - prim
    (21) prim -> . NME + prim
    (22) prim -> . prim * prim
    (23) prim -> . prim / prim
    (24) prim -> . prim - prim
    (25) prim -> . prim + prim
    (26) prim -> . NUM
    (27) prim -> . STR
    NME             shift and go to state 88
    NUM             shift and go to state 36
    STR             shift and go to state 37

    prim                           shift and go to state 89

state 53

    (48) fncc -> NME LOB args RCB .
    ;               reduce using rule 48 (fncc -> NME LOB args RCB .)
    RCB             reduce using rule 48 (fncc -> NME LOB args RCB .)


state 54

    (32) args -> args , . args
    (33) args -> args , . NME
    (34) args -> args , . prim
    (29) args -> . NME , NME
    (30) args -> . NME , args
    (31) args -> . NME , prim
    (32) args -> . args , args
    (33) args -> . args , NME
    (34) args -> . args , prim
    (35) args -> . prim , NME
    (36) args -> . prim , args
    (37) args -> . prim , prim
    (10) prim -> . NME * NME
    (11) prim -> . NME / NME
    (12) prim -> . NME - NME
    (13) prim -> . NME + NME
    (14) prim -> . prim * NME
    (15) prim -> . prim / NME
    (16) prim -> . prim - NME
    (17) prim -> . prim + NME
    (18) prim -> . NME * prim
    (19) prim -> . NME / prim
    (20) prim -> . NME - prim
    (21) prim -> . NME + prim
    (22) prim -> . prim * prim
    (23) prim -> . prim / prim
    (24) prim -> . prim - prim
    (25) prim -> . prim + prim
    (26) prim -> . NUM
    (27) prim -> . STR
    NME             shift and go to state 91
    NUM             shift and go to state 36
    STR             shift and go to state 37

    args                           shift and go to state 90
    prim                           shift and go to state 92

state 55

    (49) fncc -> NME LOB prim RCB .
    ;               reduce using rule 49 (fncc -> NME LOB prim RCB .)
    RCB             reduce using rule 49 (fncc -> NME LOB prim RCB .)


state 56

    (35) args -> prim , . NME
    (36) args -> prim , . args
    (37) args -> prim , . prim
    (29) args -> . NME , NME
    (30) args -> . NME , args
    (31) args -> . NME , prim
    (32) args -> . args , args
    (33) args -> . args , NME
    (34) args -> . args , prim
    (35) args -> . prim , NME
    (36) args -> . prim , args
    (37) args -> . prim , prim
    (10) prim -> . NME * NME
    (11) prim -> . NME / NME
    (12) prim -> . NME - NME
    (13) prim -> . NME + NME
    (14) prim -> . prim * NME
    (15) prim -> . prim / NME
    (16) prim -> . prim - NME
    (17) prim -> . prim + NME
    (18) prim -> . NME * prim
    (19) prim -> . NME / prim
    (20) prim -> . NME - prim
    (21) prim -> . NME + prim
    (22) prim -> . prim * prim
    (23) prim -> . prim / prim
    (24) prim -> . prim - prim
    (25) prim -> . prim + prim
    (26) prim -> . NUM
    (27) prim -> . STR
    NME             shift and go to state 94
    NUM             shift and go to state 36
    STR             shift and go to state 37

    prim                           shift and go to state 93
    args                           shift and go to state 95

state 57

    (14) prim -> prim * . NME
    (22) prim -> prim * . prim
    (10) prim -> . NME * NME
    (11) prim -> . NME / NME
    (12) prim -> . NME - NME
    (13) prim -> . NME + NME
    (14) prim -> . prim * NME
    (15) prim -> . prim / NME
    (16) prim -> . prim - NME
    (17) prim -> . prim + NME
    (18) prim -> . NME * prim
    (19) prim -> . NME / prim
    (20) prim -> . NME - prim
    (21) prim -> . NME + prim
    (22) prim -> . prim * prim
    (23) prim -> . prim / prim
    (24) prim -> . prim - prim
    (25) prim -> . prim + prim
    (26) prim -> . NUM
    (27) prim -> . STR
    NME             shift and go to state 97
    NUM             shift and go to state 36
    STR             shift and go to state 37

    prim                           shift and go to state 96

state 58

    (15) prim -> prim / . NME
    (23) prim -> prim / . prim
    (10) prim -> . NME * NME
    (11) prim -> . NME / NME
    (12) prim -> . NME - NME
    (13) prim -> . NME + NME
    (14) prim -> . prim * NME
    (15) prim -> . prim / NME
    (16) prim -> . prim - NME
    (17) prim -> . prim + NME
    (18) prim -> . NME * prim
    (19) prim -> . NME / prim
    (20) prim -> . NME - prim
    (21) prim -> . NME + prim
    (22) prim -> . prim * prim
    (23) prim -> . prim / prim
    (24) prim -> . prim - prim
    (25) prim -> . prim + prim
    (26) prim -> . NUM
    (27) prim -> . STR
    NME             shift and go to state 99
    NUM             shift and go to state 36
    STR             shift and go to state 37

    prim                           shift and go to state 98

state 59

    (16) prim -> prim - . NME
    (24) prim -> prim - . prim
    (10) prim -> . NME * NME
    (11) prim -> . NME / NME
    (12) prim -> . NME - NME
    (13) prim -> . NME + NME
    (14) prim -> . prim * NME
    (15) prim -> . prim / NME
    (16) prim -> . prim - NME
    (17) prim -> . prim + NME
    (18) prim -> . NME * prim
    (19) prim -> . NME / prim
    (20) prim -> . NME - prim
    (21) prim -> . NME + prim
    (22) prim -> . prim * prim
    (23) prim -> . prim / prim
    (24) prim -> . prim - prim
    (25) prim -> . prim + prim
    (26) prim -> . NUM
    (27) prim -> . STR
    NME             shift and go to state 101
    NUM             shift and go to state 36
    STR             shift and go to state 37

    prim                           shift and go to state 100

state 60

    (17) prim -> prim + . NME
    (25) prim -> prim + . prim
    (10) prim -> . NME * NME
    (11) prim -> . NME / NME
    (12) prim -> . NME - NME
    (13) prim -> . NME + NME
    (14) prim -> . prim * NME
    (15) prim -> . prim / NME
    (16) prim -> . prim - NME
    (17) prim -> . prim + NME
    (18) prim -> . NME * prim
    (19) prim -> . NME / prim
    (20) prim -> . NME - prim
    (21) prim -> . NME + prim
    (22) prim -> . prim * prim
    (23) prim -> . prim / prim
    (24) prim -> . prim - prim
    (25) prim -> . prim + prim
    (26) prim -> . NUM
    (27) prim -> . STR
    NME             shift and go to state 103
    NUM             shift and go to state 36
    STR             shift and go to state 37

    prim                           shift and go to state 102

state 61

    (28) extref -> EXT STR LSB args . RSB
    (32) args -> args . , args
    (33) args -> args . , NME
    (34) args -> args . , prim
    RSB             shift and go to state 104
    ,               shift and go to state 54


state 62

    (35) args -> prim . , NME
    (36) args -> prim . , args
    (37) args -> prim . , prim
    (14) prim -> prim . * NME
    (15) prim -> prim . / NME
    (16) prim -> prim . - NME
    (17) prim -> prim . + NME
    (22) prim -> prim . * prim
    (23) prim -> prim . / prim
    (24) prim -> prim . - prim
    (25) prim -> prim . + prim
    ,               shift and go to state 56
    *               shift and go to state 57
    /               shift and go to state 58
    -               shift and go to state 59
    +               shift and go to state 60


state 63

    (56) fncd -> FNC NME LOB NME . RCB LSB lines RSB
    (29) args -> NME . , NME
    (30) args -> NME . , args
    (31) args -> NME . , prim
    (10) prim -> NME . * NME
    (11) prim -> NME . / NME
    (12) prim -> NME . - NME
    (13) prim -> NME . + NME
    (18) prim -> NME . * prim
    (19) prim -> NME . / prim
    (20) prim -> NME . - prim
    (21) prim -> NME . + prim
    RCB             shift and go to state 105
    ,               shift and go to state 48
    *               shift and go to state 49
    /               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52


state 64

    (55) fncd -> FNC NME LOB args . RCB LSB lines RSB
    (32) args -> args . , args
    (33) args -> args . , NME
    (34) args -> args . , prim
    RCB             shift and go to state 106
    ,               shift and go to state 54


state 65

    (57) fncd -> FNC NME LOB RCB . LSB lines RSB
    (58) fncd -> FNC NME LOB RCB . LSB line RSB
    (59) fncd -> FNC NME LOB RCB . LSB RSB
    LSB             shift and go to state 107


state 66

    (53) forr -> FOR LOB fncc RCB . LSB line RSB
    (54) forr -> FOR LOB fncc RCB . LSB lines RSB
    LSB             shift and go to state 108


state 67

    (51) ifs -> IF LOB NME RCB . LSB line RSB
    (52) ifs -> IF LOB NME RCB . LSB lines RSB
    LSB             shift and go to state 109


state 68

    (48) fncc -> NME . LOB args RCB
    (49) fncc -> NME . LOB prim RCB
    (50) fncc -> NME . LOB RCB
    (10) prim -> NME . * NME
    (11) prim -> NME . / NME
    (12) prim -> NME . - NME
    (13) prim -> NME . + NME
    (18) prim -> NME . * prim
    (19) prim -> NME . / prim
    (20) prim -> NME . - prim
    (21) prim -> NME . + prim
    LOB             shift and go to state 24
    *               shift and go to state 49
    /               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52


state 69

    (38) var -> LET NME = fncc .
    ;               reduce using rule 38 (var -> LET NME = fncc .)


state 70

    (39) var -> LET NME = prim .
    (14) prim -> prim . * NME
    (15) prim -> prim . / NME
    (16) prim -> prim . - NME
    (17) prim -> prim . + NME
    (22) prim -> prim . * prim
    (23) prim -> prim . / prim
    (24) prim -> prim . - prim
    (25) prim -> prim . + prim
    ;               reduce using rule 39 (var -> LET NME = prim .)
    *               shift and go to state 57
    /               shift and go to state 58
    -               shift and go to state 59
    +               shift and go to state 60


state 71

    (44) vari -> NME $ = * NME .
    (10) prim -> NME . * NME
    (11) prim -> NME . / NME
    (12) prim -> NME . - NME
    (13) prim -> NME . + NME
    (18) prim -> NME . * prim
    (19) prim -> NME . / prim
    (20) prim -> NME . - prim
    (21) prim -> NME . + prim
    ;               reduce using rule 44 (vari -> NME $ = * NME .)
    *               shift and go to state 49
    /               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52


state 72

    (40) vari -> NME $ = * prim .
    (14) prim -> prim . * NME
    (15) prim -> prim . / NME
    (16) prim -> prim . - NME
    (17) prim -> prim . + NME
    (22) prim -> prim . * prim
    (23) prim -> prim . / prim
    (24) prim -> prim . - prim
    (25) prim -> prim . + prim
    ;               reduce using rule 40 (vari -> NME $ = * prim .)
    *               shift and go to state 57
    /               shift and go to state 58
    -               shift and go to state 59
    +               shift and go to state 60


state 73

    (45) vari -> NME $ = / NME .
    (10) prim -> NME . * NME
    (11) prim -> NME . / NME
    (12) prim -> NME . - NME
    (13) prim -> NME . + NME
    (18) prim -> NME . * prim
    (19) prim -> NME . / prim
    (20) prim -> NME . - prim
    (21) prim -> NME . + prim
    ;               reduce using rule 45 (vari -> NME $ = / NME .)
    *               shift and go to state 49
    /               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52


state 74

    (41) vari -> NME $ = / prim .
    (14) prim -> prim . * NME
    (15) prim -> prim . / NME
    (16) prim -> prim . - NME
    (17) prim -> prim . + NME
    (22) prim -> prim . * prim
    (23) prim -> prim . / prim
    (24) prim -> prim . - prim
    (25) prim -> prim . + prim
    ;               reduce using rule 41 (vari -> NME $ = / prim .)
    *               shift and go to state 57
    /               shift and go to state 58
    -               shift and go to state 59
    +               shift and go to state 60


state 75

    (46) vari -> NME $ = - NME .
    (10) prim -> NME . * NME
    (11) prim -> NME . / NME
    (12) prim -> NME . - NME
    (13) prim -> NME . + NME
    (18) prim -> NME . * prim
    (19) prim -> NME . / prim
    (20) prim -> NME . - prim
    (21) prim -> NME . + prim
    ;               reduce using rule 46 (vari -> NME $ = - NME .)
    *               shift and go to state 49
    /               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52


state 76

    (42) vari -> NME $ = - prim .
    (14) prim -> prim . * NME
    (15) prim -> prim . / NME
    (16) prim -> prim . - NME
    (17) prim -> prim . + NME
    (22) prim -> prim . * prim
    (23) prim -> prim . / prim
    (24) prim -> prim . - prim
    (25) prim -> prim . + prim
    ;               reduce using rule 42 (vari -> NME $ = - prim .)
    *               shift and go to state 57
    /               shift and go to state 58
    -               shift and go to state 59
    +               shift and go to state 60


state 77

    (47) vari -> NME $ = + NME .
    (10) prim -> NME . * NME
    (11) prim -> NME . / NME
    (12) prim -> NME . - NME
    (13) prim -> NME . + NME
    (18) prim -> NME . * prim
    (19) prim -> NME . / prim
    (20) prim -> NME . - prim
    (21) prim -> NME . + prim
    ;               reduce using rule 47 (vari -> NME $ = + NME .)
    *               shift and go to state 49
    /               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52


state 78

    (43) vari -> NME $ = + prim .
    (14) prim -> prim . * NME
    (15) prim -> prim . / NME
    (16) prim -> prim . - NME
    (17) prim -> prim . + NME
    (22) prim -> prim . * prim
    (23) prim -> prim . / prim
    (24) prim -> prim . - prim
    (25) prim -> prim . + prim
    ;               reduce using rule 43 (vari -> NME $ = + prim .)
    *               shift and go to state 57
    /               shift and go to state 58
    -               shift and go to state 59
    +               shift and go to state 60


state 79

    (29) args -> NME , NME .
    (29) args -> NME . , NME
    (30) args -> NME . , args
    (31) args -> NME . , prim
    (10) prim -> NME . * NME
    (11) prim -> NME . / NME
    (12) prim -> NME . - NME
    (13) prim -> NME . + NME
    (18) prim -> NME . * prim
    (19) prim -> NME . / prim
    (20) prim -> NME . - prim
    (21) prim -> NME . + prim
  ! shift/reduce conflict for , resolved as shift
    RCB             reduce using rule 29 (args -> NME , NME .)
    RSB             reduce using rule 29 (args -> NME , NME .)
    ,               shift and go to state 48
    *               shift and go to state 49
    /               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52


state 80

    (30) args -> NME , args .
    (32) args -> args . , args
    (33) args -> args . , NME
    (34) args -> args . , prim
  ! shift/reduce conflict for , resolved as shift
    RCB             reduce using rule 30 (args -> NME , args .)
    RSB             reduce using rule 30 (args -> NME , args .)
    ,               shift and go to state 54


state 81

    (31) args -> NME , prim .
    (35) args -> prim . , NME
    (36) args -> prim . , args
    (37) args -> prim . , prim
    (14) prim -> prim . * NME
    (15) prim -> prim . / NME
    (16) prim -> prim . - NME
    (17) prim -> prim . + NME
    (22) prim -> prim . * prim
    (23) prim -> prim . / prim
    (24) prim -> prim . - prim
    (25) prim -> prim . + prim
  ! shift/reduce conflict for , resolved as shift
    RCB             reduce using rule 31 (args -> NME , prim .)
    RSB             reduce using rule 31 (args -> NME , prim .)
    ,               shift and go to state 56
    *               shift and go to state 57
    /               shift and go to state 58
    -               shift and go to state 59
    +               shift and go to state 60


state 82

    (10) prim -> NME * NME .
    (10) prim -> NME . * NME
    (11) prim -> NME . / NME
    (12) prim -> NME . - NME
    (13) prim -> NME . + NME
    (18) prim -> NME . * prim
    (19) prim -> NME . / prim
    (20) prim -> NME . - prim
    (21) prim -> NME . + prim
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    RCB             reduce using rule 10 (prim -> NME * NME .)
    ,               reduce using rule 10 (prim -> NME * NME .)
    ;               reduce using rule 10 (prim -> NME * NME .)
    RSB             reduce using rule 10 (prim -> NME * NME .)
    *               shift and go to state 49
    /               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52


state 83

    (18) prim -> NME * prim .
    (14) prim -> prim . * NME
    (15) prim -> prim . / NME
    (16) prim -> prim . - NME
    (17) prim -> prim . + NME
    (22) prim -> prim . * prim
    (23) prim -> prim . / prim
    (24) prim -> prim . - prim
    (25) prim -> prim . + prim
    RCB             reduce using rule 18 (prim -> NME * prim .)
    ,               reduce using rule 18 (prim -> NME * prim .)
    *               reduce using rule 18 (prim -> NME * prim .)
    /               reduce using rule 18 (prim -> NME * prim .)
    -               reduce using rule 18 (prim -> NME * prim .)
    +               reduce using rule 18 (prim -> NME * prim .)
    ;               reduce using rule 18 (prim -> NME * prim .)
    RSB             reduce using rule 18 (prim -> NME * prim .)


state 84

    (11) prim -> NME / NME .
    (10) prim -> NME . * NME
    (11) prim -> NME . / NME
    (12) prim -> NME . - NME
    (13) prim -> NME . + NME
    (18) prim -> NME . * prim
    (19) prim -> NME . / prim
    (20) prim -> NME . - prim
    (21) prim -> NME . + prim
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    RCB             reduce using rule 11 (prim -> NME / NME .)
    ,               reduce using rule 11 (prim -> NME / NME .)
    ;               reduce using rule 11 (prim -> NME / NME .)
    RSB             reduce using rule 11 (prim -> NME / NME .)
    *               shift and go to state 49
    /               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52


state 85

    (19) prim -> NME / prim .
    (14) prim -> prim . * NME
    (15) prim -> prim . / NME
    (16) prim -> prim . - NME
    (17) prim -> prim . + NME
    (22) prim -> prim . * prim
    (23) prim -> prim . / prim
    (24) prim -> prim . - prim
    (25) prim -> prim . + prim
    RCB             reduce using rule 19 (prim -> NME / prim .)
    ,               reduce using rule 19 (prim -> NME / prim .)
    *               reduce using rule 19 (prim -> NME / prim .)
    /               reduce using rule 19 (prim -> NME / prim .)
    -               reduce using rule 19 (prim -> NME / prim .)
    +               reduce using rule 19 (prim -> NME / prim .)
    ;               reduce using rule 19 (prim -> NME / prim .)
    RSB             reduce using rule 19 (prim -> NME / prim .)


state 86

    (12) prim -> NME - NME .
    (10) prim -> NME . * NME
    (11) prim -> NME . / NME
    (12) prim -> NME . - NME
    (13) prim -> NME . + NME
    (18) prim -> NME . * prim
    (19) prim -> NME . / prim
    (20) prim -> NME . - prim
    (21) prim -> NME . + prim
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    RCB             reduce using rule 12 (prim -> NME - NME .)
    ,               reduce using rule 12 (prim -> NME - NME .)
    ;               reduce using rule 12 (prim -> NME - NME .)
    RSB             reduce using rule 12 (prim -> NME - NME .)
    *               shift and go to state 49
    /               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52


state 87

    (20) prim -> NME - prim .
    (14) prim -> prim . * NME
    (15) prim -> prim . / NME
    (16) prim -> prim . - NME
    (17) prim -> prim . + NME
    (22) prim -> prim . * prim
    (23) prim -> prim . / prim
    (24) prim -> prim . - prim
    (25) prim -> prim . + prim
    RCB             reduce using rule 20 (prim -> NME - prim .)
    ,               reduce using rule 20 (prim -> NME - prim .)
    *               reduce using rule 20 (prim -> NME - prim .)
    /               reduce using rule 20 (prim -> NME - prim .)
    -               reduce using rule 20 (prim -> NME - prim .)
    +               reduce using rule 20 (prim -> NME - prim .)
    ;               reduce using rule 20 (prim -> NME - prim .)
    RSB             reduce using rule 20 (prim -> NME - prim .)


state 88

    (13) prim -> NME + NME .
    (10) prim -> NME . * NME
    (11) prim -> NME . / NME
    (12) prim -> NME . - NME
    (13) prim -> NME . + NME
    (18) prim -> NME . * prim
    (19) prim -> NME . / prim
    (20) prim -> NME . - prim
    (21) prim -> NME . + prim
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    RCB             reduce using rule 13 (prim -> NME + NME .)
    ,               reduce using rule 13 (prim -> NME + NME .)
    ;               reduce using rule 13 (prim -> NME + NME .)
    RSB             reduce using rule 13 (prim -> NME + NME .)
    *               shift and go to state 49
    /               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52


state 89

    (21) prim -> NME + prim .
    (14) prim -> prim . * NME
    (15) prim -> prim . / NME
    (16) prim -> prim . - NME
    (17) prim -> prim . + NME
    (22) prim -> prim . * prim
    (23) prim -> prim . / prim
    (24) prim -> prim . - prim
    (25) prim -> prim . + prim
    RCB             reduce using rule 21 (prim -> NME + prim .)
    ,               reduce using rule 21 (prim -> NME + prim .)
    *               reduce using rule 21 (prim -> NME + prim .)
    /               reduce using rule 21 (prim -> NME + prim .)
    -               reduce using rule 21 (prim -> NME + prim .)
    +               reduce using rule 21 (prim -> NME + prim .)
    ;               reduce using rule 21 (prim -> NME + prim .)
    RSB             reduce using rule 21 (prim -> NME + prim .)


state 90

    (32) args -> args , args .
    (32) args -> args . , args
    (33) args -> args . , NME
    (34) args -> args . , prim
  ! shift/reduce conflict for , resolved as shift
    RCB             reduce using rule 32 (args -> args , args .)
    RSB             reduce using rule 32 (args -> args , args .)
    ,               shift and go to state 54


state 91

    (33) args -> args , NME .
    (29) args -> NME . , NME
    (30) args -> NME . , args
    (31) args -> NME . , prim
    (10) prim -> NME . * NME
    (11) prim -> NME . / NME
    (12) prim -> NME . - NME
    (13) prim -> NME . + NME
    (18) prim -> NME . * prim
    (19) prim -> NME . / prim
    (20) prim -> NME . - prim
    (21) prim -> NME . + prim
  ! shift/reduce conflict for , resolved as shift
    RCB             reduce using rule 33 (args -> args , NME .)
    RSB             reduce using rule 33 (args -> args , NME .)
    ,               shift and go to state 48
    *               shift and go to state 49
    /               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52


state 92

    (34) args -> args , prim .
    (35) args -> prim . , NME
    (36) args -> prim . , args
    (37) args -> prim . , prim
    (14) prim -> prim . * NME
    (15) prim -> prim . / NME
    (16) prim -> prim . - NME
    (17) prim -> prim . + NME
    (22) prim -> prim . * prim
    (23) prim -> prim . / prim
    (24) prim -> prim . - prim
    (25) prim -> prim . + prim
  ! shift/reduce conflict for , resolved as shift
    RCB             reduce using rule 34 (args -> args , prim .)
    RSB             reduce using rule 34 (args -> args , prim .)
    ,               shift and go to state 56
    *               shift and go to state 57
    /               shift and go to state 58
    -               shift and go to state 59
    +               shift and go to state 60


state 93

    (37) args -> prim , prim .
    (35) args -> prim . , NME
    (36) args -> prim . , args
    (37) args -> prim . , prim
    (14) prim -> prim . * NME
    (15) prim -> prim . / NME
    (16) prim -> prim . - NME
    (17) prim -> prim . + NME
    (22) prim -> prim . * prim
    (23) prim -> prim . / prim
    (24) prim -> prim . - prim
    (25) prim -> prim . + prim
  ! shift/reduce conflict for , resolved as shift
    RCB             reduce using rule 37 (args -> prim , prim .)
    RSB             reduce using rule 37 (args -> prim , prim .)
    ,               shift and go to state 56
    *               shift and go to state 57
    /               shift and go to state 58
    -               shift and go to state 59
    +               shift and go to state 60


state 94

    (35) args -> prim , NME .
    (29) args -> NME . , NME
    (30) args -> NME . , args
    (31) args -> NME . , prim
    (10) prim -> NME . * NME
    (11) prim -> NME . / NME
    (12) prim -> NME . - NME
    (13) prim -> NME . + NME
    (18) prim -> NME . * prim
    (19) prim -> NME . / prim
    (20) prim -> NME . - prim
    (21) prim -> NME . + prim
  ! shift/reduce conflict for , resolved as shift
    RCB             reduce using rule 35 (args -> prim , NME .)
    RSB             reduce using rule 35 (args -> prim , NME .)
    ,               shift and go to state 48
    *               shift and go to state 49
    /               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52


state 95

    (36) args -> prim , args .
    (32) args -> args . , args
    (33) args -> args . , NME
    (34) args -> args . , prim
  ! shift/reduce conflict for , resolved as shift
    RCB             reduce using rule 36 (args -> prim , args .)
    RSB             reduce using rule 36 (args -> prim , args .)
    ,               shift and go to state 54


state 96

    (22) prim -> prim * prim .
    (14) prim -> prim . * NME
    (15) prim -> prim . / NME
    (16) prim -> prim . - NME
    (17) prim -> prim . + NME
    (22) prim -> prim . * prim
    (23) prim -> prim . / prim
    (24) prim -> prim . - prim
    (25) prim -> prim . + prim
    RCB             reduce using rule 22 (prim -> prim * prim .)
    ,               reduce using rule 22 (prim -> prim * prim .)
    *               reduce using rule 22 (prim -> prim * prim .)
    /               reduce using rule 22 (prim -> prim * prim .)
    -               reduce using rule 22 (prim -> prim * prim .)
    +               reduce using rule 22 (prim -> prim * prim .)
    ;               reduce using rule 22 (prim -> prim * prim .)
    RSB             reduce using rule 22 (prim -> prim * prim .)


state 97

    (14) prim -> prim * NME .
    (10) prim -> NME . * NME
    (11) prim -> NME . / NME
    (12) prim -> NME . - NME
    (13) prim -> NME . + NME
    (18) prim -> NME . * prim
    (19) prim -> NME . / prim
    (20) prim -> NME . - prim
    (21) prim -> NME . + prim
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    RCB             reduce using rule 14 (prim -> prim * NME .)
    ,               reduce using rule 14 (prim -> prim * NME .)
    ;               reduce using rule 14 (prim -> prim * NME .)
    RSB             reduce using rule 14 (prim -> prim * NME .)
    *               shift and go to state 49
    /               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52


state 98

    (23) prim -> prim / prim .
    (14) prim -> prim . * NME
    (15) prim -> prim . / NME
    (16) prim -> prim . - NME
    (17) prim -> prim . + NME
    (22) prim -> prim . * prim
    (23) prim -> prim . / prim
    (24) prim -> prim . - prim
    (25) prim -> prim . + prim
    RCB             reduce using rule 23 (prim -> prim / prim .)
    ,               reduce using rule 23 (prim -> prim / prim .)
    *               reduce using rule 23 (prim -> prim / prim .)
    /               reduce using rule 23 (prim -> prim / prim .)
    -               reduce using rule 23 (prim -> prim / prim .)
    +               reduce using rule 23 (prim -> prim / prim .)
    ;               reduce using rule 23 (prim -> prim / prim .)
    RSB             reduce using rule 23 (prim -> prim / prim .)


state 99

    (15) prim -> prim / NME .
    (10) prim -> NME . * NME
    (11) prim -> NME . / NME
    (12) prim -> NME . - NME
    (13) prim -> NME . + NME
    (18) prim -> NME . * prim
    (19) prim -> NME . / prim
    (20) prim -> NME . - prim
    (21) prim -> NME . + prim
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    RCB             reduce using rule 15 (prim -> prim / NME .)
    ,               reduce using rule 15 (prim -> prim / NME .)
    ;               reduce using rule 15 (prim -> prim / NME .)
    RSB             reduce using rule 15 (prim -> prim / NME .)
    *               shift and go to state 49
    /               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52


state 100

    (24) prim -> prim - prim .
    (14) prim -> prim . * NME
    (15) prim -> prim . / NME
    (16) prim -> prim . - NME
    (17) prim -> prim . + NME
    (22) prim -> prim . * prim
    (23) prim -> prim . / prim
    (24) prim -> prim . - prim
    (25) prim -> prim . + prim
    RCB             reduce using rule 24 (prim -> prim - prim .)
    ,               reduce using rule 24 (prim -> prim - prim .)
    *               reduce using rule 24 (prim -> prim - prim .)
    /               reduce using rule 24 (prim -> prim - prim .)
    -               reduce using rule 24 (prim -> prim - prim .)
    +               reduce using rule 24 (prim -> prim - prim .)
    ;               reduce using rule 24 (prim -> prim - prim .)
    RSB             reduce using rule 24 (prim -> prim - prim .)


state 101

    (16) prim -> prim - NME .
    (10) prim -> NME . * NME
    (11) prim -> NME . / NME
    (12) prim -> NME . - NME
    (13) prim -> NME . + NME
    (18) prim -> NME . * prim
    (19) prim -> NME . / prim
    (20) prim -> NME . - prim
    (21) prim -> NME . + prim
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    RCB             reduce using rule 16 (prim -> prim - NME .)
    ,               reduce using rule 16 (prim -> prim - NME .)
    ;               reduce using rule 16 (prim -> prim - NME .)
    RSB             reduce using rule 16 (prim -> prim - NME .)
    *               shift and go to state 49
    /               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52


state 102

    (25) prim -> prim + prim .
    (14) prim -> prim . * NME
    (15) prim -> prim . / NME
    (16) prim -> prim . - NME
    (17) prim -> prim . + NME
    (22) prim -> prim . * prim
    (23) prim -> prim . / prim
    (24) prim -> prim . - prim
    (25) prim -> prim . + prim
    RCB             reduce using rule 25 (prim -> prim + prim .)
    ,               reduce using rule 25 (prim -> prim + prim .)
    *               reduce using rule 25 (prim -> prim + prim .)
    /               reduce using rule 25 (prim -> prim + prim .)
    -               reduce using rule 25 (prim -> prim + prim .)
    +               reduce using rule 25 (prim -> prim + prim .)
    ;               reduce using rule 25 (prim -> prim + prim .)
    RSB             reduce using rule 25 (prim -> prim + prim .)


state 103

    (17) prim -> prim + NME .
    (10) prim -> NME . * NME
    (11) prim -> NME . / NME
    (12) prim -> NME . - NME
    (13) prim -> NME . + NME
    (18) prim -> NME . * prim
    (19) prim -> NME . / prim
    (20) prim -> NME . - prim
    (21) prim -> NME . + prim
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    RCB             reduce using rule 17 (prim -> prim + NME .)
    ,               reduce using rule 17 (prim -> prim + NME .)
    ;               reduce using rule 17 (prim -> prim + NME .)
    RSB             reduce using rule 17 (prim -> prim + NME .)
    *               shift and go to state 49
    /               shift and go to state 50
    -               shift and go to state 51
    +               shift and go to state 52


state 104

    (28) extref -> EXT STR LSB args RSB .
    ;               reduce using rule 28 (extref -> EXT STR LSB args RSB .)


state 105

    (56) fncd -> FNC NME LOB NME RCB . LSB lines RSB
    LSB             shift and go to state 110


state 106

    (55) fncd -> FNC NME LOB args RCB . LSB lines RSB
    LSB             shift and go to state 111


state 107

    (57) fncd -> FNC NME LOB RCB LSB . lines RSB
    (58) fncd -> FNC NME LOB RCB LSB . line RSB
    (59) fncd -> FNC NME LOB RCB LSB . RSB
    (62) lines -> . line lines
    (63) lines -> . lines line
    (64) lines -> . line line
    (61) line -> . stmt ;
    (1) stmt -> . vari
    (2) stmt -> . extref
    (3) stmt -> . fncd
    (4) stmt -> . importt
    (5) stmt -> . forr
    (6) stmt -> . ifs
    (7) stmt -> . fncc
    (8) stmt -> . var
    (9) stmt -> .
    (40) vari -> . NME $ = * prim
    (41) vari -> . NME $ = / prim
    (42) vari -> . NME $ = - prim
    (43) vari -> . NME $ = + prim
    (44) vari -> . NME $ = * NME
    (45) vari -> . NME $ = / NME
    (46) vari -> . NME $ = - NME
    (47) vari -> . NME $ = + NME
    (28) extref -> . EXT STR LSB args RSB
    (55) fncd -> . FNC NME LOB args RCB LSB lines RSB
    (56) fncd -> . FNC NME LOB NME RCB LSB lines RSB
    (57) fncd -> . FNC NME LOB RCB LSB lines RSB
    (58) fncd -> . FNC NME LOB RCB LSB line RSB
    (59) fncd -> . FNC NME LOB RCB LSB RSB
    (60) importt -> . USING STR
    (53) forr -> . FOR LOB fncc RCB LSB line RSB
    (54) forr -> . FOR LOB fncc RCB LSB lines RSB
    (51) ifs -> . IF LOB NME RCB LSB line RSB
    (52) ifs -> . IF LOB NME RCB LSB lines RSB
    (48) fncc -> . NME LOB args RCB
    (49) fncc -> . NME LOB prim RCB
    (50) fncc -> . NME LOB RCB
    (38) var -> . LET NME = fncc
    (39) var -> . LET NME = prim
    RSB             shift and go to state 113
    ;               reduce using rule 9 (stmt -> .)
    NME             shift and go to state 12
    EXT             shift and go to state 13
    FNC             shift and go to state 14
    USING           shift and go to state 15
    FOR             shift and go to state 16
    IF              shift and go to state 17
    LET             shift and go to state 18

    lines                          shift and go to state 112
    line                           shift and go to state 114
    stmt                           shift and go to state 3
    vari                           shift and go to state 4
    extref                         shift and go to state 5
    fncd                           shift and go to state 6
    importt                        shift and go to state 7
    forr                           shift and go to state 8
    ifs                            shift and go to state 9
    fncc                           shift and go to state 10
    var                            shift and go to state 11

state 108

    (53) forr -> FOR LOB fncc RCB LSB . line RSB
    (54) forr -> FOR LOB fncc RCB LSB . lines RSB
    (61) line -> . stmt ;
    (62) lines -> . line lines
    (63) lines -> . lines line
    (64) lines -> . line line
    (1) stmt -> . vari
    (2) stmt -> . extref
    (3) stmt -> . fncd
    (4) stmt -> . importt
    (5) stmt -> . forr
    (6) stmt -> . ifs
    (7) stmt -> . fncc
    (8) stmt -> . var
    (9) stmt -> .
    (40) vari -> . NME $ = * prim
    (41) vari -> . NME $ = / prim
    (42) vari -> . NME $ = - prim
    (43) vari -> . NME $ = + prim
    (44) vari -> . NME $ = * NME
    (45) vari -> . NME $ = / NME
    (46) vari -> . NME $ = - NME
    (47) vari -> . NME $ = + NME
    (28) extref -> . EXT STR LSB args RSB
    (55) fncd -> . FNC NME LOB args RCB LSB lines RSB
    (56) fncd -> . FNC NME LOB NME RCB LSB lines RSB
    (57) fncd -> . FNC NME LOB RCB LSB lines RSB
    (58) fncd -> . FNC NME LOB RCB LSB line RSB
    (59) fncd -> . FNC NME LOB RCB LSB RSB
    (60) importt -> . USING STR
    (53) forr -> . FOR LOB fncc RCB LSB line RSB
    (54) forr -> . FOR LOB fncc RCB LSB lines RSB
    (51) ifs -> . IF LOB NME RCB LSB line RSB
    (52) ifs -> . IF LOB NME RCB LSB lines RSB
    (48) fncc -> . NME LOB args RCB
    (49) fncc -> . NME LOB prim RCB
    (50) fncc -> . NME LOB RCB
    (38) var -> . LET NME = fncc
    (39) var -> . LET NME = prim
    ;               reduce using rule 9 (stmt -> .)
    NME             shift and go to state 12
    EXT             shift and go to state 13
    FNC             shift and go to state 14
    USING           shift and go to state 15
    FOR             shift and go to state 16
    IF              shift and go to state 17
    LET             shift and go to state 18

    fncc                           shift and go to state 10
    line                           shift and go to state 115
    lines                          shift and go to state 116
    stmt                           shift and go to state 3
    vari                           shift and go to state 4
    extref                         shift and go to state 5
    fncd                           shift and go to state 6
    importt                        shift and go to state 7
    forr                           shift and go to state 8
    ifs                            shift and go to state 9
    var                            shift and go to state 11

state 109

    (51) ifs -> IF LOB NME RCB LSB . line RSB
    (52) ifs -> IF LOB NME RCB LSB . lines RSB
    (61) line -> . stmt ;
    (62) lines -> . line lines
    (63) lines -> . lines line
    (64) lines -> . line line
    (1) stmt -> . vari
    (2) stmt -> . extref
    (3) stmt -> . fncd
    (4) stmt -> . importt
    (5) stmt -> . forr
    (6) stmt -> . ifs
    (7) stmt -> . fncc
    (8) stmt -> . var
    (9) stmt -> .
    (40) vari -> . NME $ = * prim
    (41) vari -> . NME $ = / prim
    (42) vari -> . NME $ = - prim
    (43) vari -> . NME $ = + prim
    (44) vari -> . NME $ = * NME
    (45) vari -> . NME $ = / NME
    (46) vari -> . NME $ = - NME
    (47) vari -> . NME $ = + NME
    (28) extref -> . EXT STR LSB args RSB
    (55) fncd -> . FNC NME LOB args RCB LSB lines RSB
    (56) fncd -> . FNC NME LOB NME RCB LSB lines RSB
    (57) fncd -> . FNC NME LOB RCB LSB lines RSB
    (58) fncd -> . FNC NME LOB RCB LSB line RSB
    (59) fncd -> . FNC NME LOB RCB LSB RSB
    (60) importt -> . USING STR
    (53) forr -> . FOR LOB fncc RCB LSB line RSB
    (54) forr -> . FOR LOB fncc RCB LSB lines RSB
    (51) ifs -> . IF LOB NME RCB LSB line RSB
    (52) ifs -> . IF LOB NME RCB LSB lines RSB
    (48) fncc -> . NME LOB args RCB
    (49) fncc -> . NME LOB prim RCB
    (50) fncc -> . NME LOB RCB
    (38) var -> . LET NME = fncc
    (39) var -> . LET NME = prim
    ;               reduce using rule 9 (stmt -> .)
    NME             shift and go to state 12
    EXT             shift and go to state 13
    FNC             shift and go to state 14
    USING           shift and go to state 15
    FOR             shift and go to state 16
    IF              shift and go to state 17
    LET             shift and go to state 18

    line                           shift and go to state 117
    lines                          shift and go to state 118
    stmt                           shift and go to state 3
    vari                           shift and go to state 4
    extref                         shift and go to state 5
    fncd                           shift and go to state 6
    importt                        shift and go to state 7
    forr                           shift and go to state 8
    ifs                            shift and go to state 9
    fncc                           shift and go to state 10
    var                            shift and go to state 11

state 110

    (56) fncd -> FNC NME LOB NME RCB LSB . lines RSB
    (62) lines -> . line lines
    (63) lines -> . lines line
    (64) lines -> . line line
    (61) line -> . stmt ;
    (1) stmt -> . vari
    (2) stmt -> . extref
    (3) stmt -> . fncd
    (4) stmt -> . importt
    (5) stmt -> . forr
    (6) stmt -> . ifs
    (7) stmt -> . fncc
    (8) stmt -> . var
    (9) stmt -> .
    (40) vari -> . NME $ = * prim
    (41) vari -> . NME $ = / prim
    (42) vari -> . NME $ = - prim
    (43) vari -> . NME $ = + prim
    (44) vari -> . NME $ = * NME
    (45) vari -> . NME $ = / NME
    (46) vari -> . NME $ = - NME
    (47) vari -> . NME $ = + NME
    (28) extref -> . EXT STR LSB args RSB
    (55) fncd -> . FNC NME LOB args RCB LSB lines RSB
    (56) fncd -> . FNC NME LOB NME RCB LSB lines RSB
    (57) fncd -> . FNC NME LOB RCB LSB lines RSB
    (58) fncd -> . FNC NME LOB RCB LSB line RSB
    (59) fncd -> . FNC NME LOB RCB LSB RSB
    (60) importt -> . USING STR
    (53) forr -> . FOR LOB fncc RCB LSB line RSB
    (54) forr -> . FOR LOB fncc RCB LSB lines RSB
    (51) ifs -> . IF LOB NME RCB LSB line RSB
    (52) ifs -> . IF LOB NME RCB LSB lines RSB
    (48) fncc -> . NME LOB args RCB
    (49) fncc -> . NME LOB prim RCB
    (50) fncc -> . NME LOB RCB
    (38) var -> . LET NME = fncc
    (39) var -> . LET NME = prim
    ;               reduce using rule 9 (stmt -> .)
    NME             shift and go to state 12
    EXT             shift and go to state 13
    FNC             shift and go to state 14
    USING           shift and go to state 15
    FOR             shift and go to state 16
    IF              shift and go to state 17
    LET             shift and go to state 18

    lines                          shift and go to state 119
    line                           shift and go to state 2
    stmt                           shift and go to state 3
    vari                           shift and go to state 4
    extref                         shift and go to state 5
    fncd                           shift and go to state 6
    importt                        shift and go to state 7
    forr                           shift and go to state 8
    ifs                            shift and go to state 9
    fncc                           shift and go to state 10
    var                            shift and go to state 11

state 111

    (55) fncd -> FNC NME LOB args RCB LSB . lines RSB
    (62) lines -> . line lines
    (63) lines -> . lines line
    (64) lines -> . line line
    (61) line -> . stmt ;
    (1) stmt -> . vari
    (2) stmt -> . extref
    (3) stmt -> . fncd
    (4) stmt -> . importt
    (5) stmt -> . forr
    (6) stmt -> . ifs
    (7) stmt -> . fncc
    (8) stmt -> . var
    (9) stmt -> .
    (40) vari -> . NME $ = * prim
    (41) vari -> . NME $ = / prim
    (42) vari -> . NME $ = - prim
    (43) vari -> . NME $ = + prim
    (44) vari -> . NME $ = * NME
    (45) vari -> . NME $ = / NME
    (46) vari -> . NME $ = - NME
    (47) vari -> . NME $ = + NME
    (28) extref -> . EXT STR LSB args RSB
    (55) fncd -> . FNC NME LOB args RCB LSB lines RSB
    (56) fncd -> . FNC NME LOB NME RCB LSB lines RSB
    (57) fncd -> . FNC NME LOB RCB LSB lines RSB
    (58) fncd -> . FNC NME LOB RCB LSB line RSB
    (59) fncd -> . FNC NME LOB RCB LSB RSB
    (60) importt -> . USING STR
    (53) forr -> . FOR LOB fncc RCB LSB line RSB
    (54) forr -> . FOR LOB fncc RCB LSB lines RSB
    (51) ifs -> . IF LOB NME RCB LSB line RSB
    (52) ifs -> . IF LOB NME RCB LSB lines RSB
    (48) fncc -> . NME LOB args RCB
    (49) fncc -> . NME LOB prim RCB
    (50) fncc -> . NME LOB RCB
    (38) var -> . LET NME = fncc
    (39) var -> . LET NME = prim
    ;               reduce using rule 9 (stmt -> .)
    NME             shift and go to state 12
    EXT             shift and go to state 13
    FNC             shift and go to state 14
    USING           shift and go to state 15
    FOR             shift and go to state 16
    IF              shift and go to state 17
    LET             shift and go to state 18

    lines                          shift and go to state 120
    line                           shift and go to state 2
    stmt                           shift and go to state 3
    vari                           shift and go to state 4
    extref                         shift and go to state 5
    fncd                           shift and go to state 6
    importt                        shift and go to state 7
    forr                           shift and go to state 8
    ifs                            shift and go to state 9
    fncc                           shift and go to state 10
    var                            shift and go to state 11

state 112

    (57) fncd -> FNC NME LOB RCB LSB lines . RSB
    (63) lines -> lines . line
    (61) line -> . stmt ;
    (1) stmt -> . vari
    (2) stmt -> . extref
    (3) stmt -> . fncd
    (4) stmt -> . importt
    (5) stmt -> . forr
    (6) stmt -> . ifs
    (7) stmt -> . fncc
    (8) stmt -> . var
    (9) stmt -> .
    (40) vari -> . NME $ = * prim
    (41) vari -> . NME $ = / prim
    (42) vari -> . NME $ = - prim
    (43) vari -> . NME $ = + prim
    (44) vari -> . NME $ = * NME
    (45) vari -> . NME $ = / NME
    (46) vari -> . NME $ = - NME
    (47) vari -> . NME $ = + NME
    (28) extref -> . EXT STR LSB args RSB
    (55) fncd -> . FNC NME LOB args RCB LSB lines RSB
    (56) fncd -> . FNC NME LOB NME RCB LSB lines RSB
    (57) fncd -> . FNC NME LOB RCB LSB lines RSB
    (58) fncd -> . FNC NME LOB RCB LSB line RSB
    (59) fncd -> . FNC NME LOB RCB LSB RSB
    (60) importt -> . USING STR
    (53) forr -> . FOR LOB fncc RCB LSB line RSB
    (54) forr -> . FOR LOB fncc RCB LSB lines RSB
    (51) ifs -> . IF LOB NME RCB LSB line RSB
    (52) ifs -> . IF LOB NME RCB LSB lines RSB
    (48) fncc -> . NME LOB args RCB
    (49) fncc -> . NME LOB prim RCB
    (50) fncc -> . NME LOB RCB
    (38) var -> . LET NME = fncc
    (39) var -> . LET NME = prim
    RSB             shift and go to state 121
    ;               reduce using rule 9 (stmt -> .)
    NME             shift and go to state 12
    EXT             shift and go to state 13
    FNC             shift and go to state 14
    USING           shift and go to state 15
    FOR             shift and go to state 16
    IF              shift and go to state 17
    LET             shift and go to state 18

    line                           shift and go to state 19
    stmt                           shift and go to state 3
    vari                           shift and go to state 4
    extref                         shift and go to state 5
    fncd                           shift and go to state 6
    importt                        shift and go to state 7
    forr                           shift and go to state 8
    ifs                            shift and go to state 9
    fncc                           shift and go to state 10
    var                            shift and go to state 11

state 113

    (59) fncd -> FNC NME LOB RCB LSB RSB .
    ;               reduce using rule 59 (fncd -> FNC NME LOB RCB LSB RSB .)


state 114

    (58) fncd -> FNC NME LOB RCB LSB line . RSB
    (62) lines -> line . lines
    (64) lines -> line . line
    (62) lines -> . line lines
    (63) lines -> . lines line
    (64) lines -> . line line
    (61) line -> . stmt ;
    (1) stmt -> . vari
    (2) stmt -> . extref
    (3) stmt -> . fncd
    (4) stmt -> . importt
    (5) stmt -> . forr
    (6) stmt -> . ifs
    (7) stmt -> . fncc
    (8) stmt -> . var
    (9) stmt -> .
    (40) vari -> . NME $ = * prim
    (41) vari -> . NME $ = / prim
    (42) vari -> . NME $ = - prim
    (43) vari -> . NME $ = + prim
    (44) vari -> . NME $ = * NME
    (45) vari -> . NME $ = / NME
    (46) vari -> . NME $ = - NME
    (47) vari -> . NME $ = + NME
    (28) extref -> . EXT STR LSB args RSB
    (55) fncd -> . FNC NME LOB args RCB LSB lines RSB
    (56) fncd -> . FNC NME LOB NME RCB LSB lines RSB
    (57) fncd -> . FNC NME LOB RCB LSB lines RSB
    (58) fncd -> . FNC NME LOB RCB LSB line RSB
    (59) fncd -> . FNC NME LOB RCB LSB RSB
    (60) importt -> . USING STR
    (53) forr -> . FOR LOB fncc RCB LSB line RSB
    (54) forr -> . FOR LOB fncc RCB LSB lines RSB
    (51) ifs -> . IF LOB NME RCB LSB line RSB
    (52) ifs -> . IF LOB NME RCB LSB lines RSB
    (48) fncc -> . NME LOB args RCB
    (49) fncc -> . NME LOB prim RCB
    (50) fncc -> . NME LOB RCB
    (38) var -> . LET NME = fncc
    (39) var -> . LET NME = prim
    RSB             shift and go to state 122
    ;               reduce using rule 9 (stmt -> .)
    NME             shift and go to state 12
    EXT             shift and go to state 13
    FNC             shift and go to state 14
    USING           shift and go to state 15
    FOR             shift and go to state 16
    IF              shift and go to state 17
    LET             shift and go to state 18

    line                           shift and go to state 20
    lines                          shift and go to state 21
    stmt                           shift and go to state 3
    vari                           shift and go to state 4
    extref                         shift and go to state 5
    fncd                           shift and go to state 6
    importt                        shift and go to state 7
    forr                           shift and go to state 8
    ifs                            shift and go to state 9
    fncc                           shift and go to state 10
    var                            shift and go to state 11

state 115

    (53) forr -> FOR LOB fncc RCB LSB line . RSB
    (62) lines -> line . lines
    (64) lines -> line . line
    (62) lines -> . line lines
    (63) lines -> . lines line
    (64) lines -> . line line
    (61) line -> . stmt ;
    (1) stmt -> . vari
    (2) stmt -> . extref
    (3) stmt -> . fncd
    (4) stmt -> . importt
    (5) stmt -> . forr
    (6) stmt -> . ifs
    (7) stmt -> . fncc
    (8) stmt -> . var
    (9) stmt -> .
    (40) vari -> . NME $ = * prim
    (41) vari -> . NME $ = / prim
    (42) vari -> . NME $ = - prim
    (43) vari -> . NME $ = + prim
    (44) vari -> . NME $ = * NME
    (45) vari -> . NME $ = / NME
    (46) vari -> . NME $ = - NME
    (47) vari -> . NME $ = + NME
    (28) extref -> . EXT STR LSB args RSB
    (55) fncd -> . FNC NME LOB args RCB LSB lines RSB
    (56) fncd -> . FNC NME LOB NME RCB LSB lines RSB
    (57) fncd -> . FNC NME LOB RCB LSB lines RSB
    (58) fncd -> . FNC NME LOB RCB LSB line RSB
    (59) fncd -> . FNC NME LOB RCB LSB RSB
    (60) importt -> . USING STR
    (53) forr -> . FOR LOB fncc RCB LSB line RSB
    (54) forr -> . FOR LOB fncc RCB LSB lines RSB
    (51) ifs -> . IF LOB NME RCB LSB line RSB
    (52) ifs -> . IF LOB NME RCB LSB lines RSB
    (48) fncc -> . NME LOB args RCB
    (49) fncc -> . NME LOB prim RCB
    (50) fncc -> . NME LOB RCB
    (38) var -> . LET NME = fncc
    (39) var -> . LET NME = prim
    RSB             shift and go to state 123
    ;               reduce using rule 9 (stmt -> .)
    NME             shift and go to state 12
    EXT             shift and go to state 13
    FNC             shift and go to state 14
    USING           shift and go to state 15
    FOR             shift and go to state 16
    IF              shift and go to state 17
    LET             shift and go to state 18

    fncc                           shift and go to state 10
    line                           shift and go to state 20
    lines                          shift and go to state 21
    stmt                           shift and go to state 3
    vari                           shift and go to state 4
    extref                         shift and go to state 5
    fncd                           shift and go to state 6
    importt                        shift and go to state 7
    forr                           shift and go to state 8
    ifs                            shift and go to state 9
    var                            shift and go to state 11

state 116

    (54) forr -> FOR LOB fncc RCB LSB lines . RSB
    (63) lines -> lines . line
    (61) line -> . stmt ;
    (1) stmt -> . vari
    (2) stmt -> . extref
    (3) stmt -> . fncd
    (4) stmt -> . importt
    (5) stmt -> . forr
    (6) stmt -> . ifs
    (7) stmt -> . fncc
    (8) stmt -> . var
    (9) stmt -> .
    (40) vari -> . NME $ = * prim
    (41) vari -> . NME $ = / prim
    (42) vari -> . NME $ = - prim
    (43) vari -> . NME $ = + prim
    (44) vari -> . NME $ = * NME
    (45) vari -> . NME $ = / NME
    (46) vari -> . NME $ = - NME
    (47) vari -> . NME $ = + NME
    (28) extref -> . EXT STR LSB args RSB
    (55) fncd -> . FNC NME LOB args RCB LSB lines RSB
    (56) fncd -> . FNC NME LOB NME RCB LSB lines RSB
    (57) fncd -> . FNC NME LOB RCB LSB lines RSB
    (58) fncd -> . FNC NME LOB RCB LSB line RSB
    (59) fncd -> . FNC NME LOB RCB LSB RSB
    (60) importt -> . USING STR
    (53) forr -> . FOR LOB fncc RCB LSB line RSB
    (54) forr -> . FOR LOB fncc RCB LSB lines RSB
    (51) ifs -> . IF LOB NME RCB LSB line RSB
    (52) ifs -> . IF LOB NME RCB LSB lines RSB
    (48) fncc -> . NME LOB args RCB
    (49) fncc -> . NME LOB prim RCB
    (50) fncc -> . NME LOB RCB
    (38) var -> . LET NME = fncc
    (39) var -> . LET NME = prim
    RSB             shift and go to state 124
    ;               reduce using rule 9 (stmt -> .)
    NME             shift and go to state 12
    EXT             shift and go to state 13
    FNC             shift and go to state 14
    USING           shift and go to state 15
    FOR             shift and go to state 16
    IF              shift and go to state 17
    LET             shift and go to state 18

    fncc                           shift and go to state 10
    line                           shift and go to state 19
    stmt                           shift and go to state 3
    vari                           shift and go to state 4
    extref                         shift and go to state 5
    fncd                           shift and go to state 6
    importt                        shift and go to state 7
    forr                           shift and go to state 8
    ifs                            shift and go to state 9
    var                            shift and go to state 11

state 117

    (51) ifs -> IF LOB NME RCB LSB line . RSB
    (62) lines -> line . lines
    (64) lines -> line . line
    (62) lines -> . line lines
    (63) lines -> . lines line
    (64) lines -> . line line
    (61) line -> . stmt ;
    (1) stmt -> . vari
    (2) stmt -> . extref
    (3) stmt -> . fncd
    (4) stmt -> . importt
    (5) stmt -> . forr
    (6) stmt -> . ifs
    (7) stmt -> . fncc
    (8) stmt -> . var
    (9) stmt -> .
    (40) vari -> . NME $ = * prim
    (41) vari -> . NME $ = / prim
    (42) vari -> . NME $ = - prim
    (43) vari -> . NME $ = + prim
    (44) vari -> . NME $ = * NME
    (45) vari -> . NME $ = / NME
    (46) vari -> . NME $ = - NME
    (47) vari -> . NME $ = + NME
    (28) extref -> . EXT STR LSB args RSB
    (55) fncd -> . FNC NME LOB args RCB LSB lines RSB
    (56) fncd -> . FNC NME LOB NME RCB LSB lines RSB
    (57) fncd -> . FNC NME LOB RCB LSB lines RSB
    (58) fncd -> . FNC NME LOB RCB LSB line RSB
    (59) fncd -> . FNC NME LOB RCB LSB RSB
    (60) importt -> . USING STR
    (53) forr -> . FOR LOB fncc RCB LSB line RSB
    (54) forr -> . FOR LOB fncc RCB LSB lines RSB
    (51) ifs -> . IF LOB NME RCB LSB line RSB
    (52) ifs -> . IF LOB NME RCB LSB lines RSB
    (48) fncc -> . NME LOB args RCB
    (49) fncc -> . NME LOB prim RCB
    (50) fncc -> . NME LOB RCB
    (38) var -> . LET NME = fncc
    (39) var -> . LET NME = prim
    RSB             shift and go to state 125
    ;               reduce using rule 9 (stmt -> .)
    NME             shift and go to state 12
    EXT             shift and go to state 13
    FNC             shift and go to state 14
    USING           shift and go to state 15
    FOR             shift and go to state 16
    IF              shift and go to state 17
    LET             shift and go to state 18

    line                           shift and go to state 20
    lines                          shift and go to state 21
    stmt                           shift and go to state 3
    vari                           shift and go to state 4
    extref                         shift and go to state 5
    fncd                           shift and go to state 6
    importt                        shift and go to state 7
    forr                           shift and go to state 8
    ifs                            shift and go to state 9
    fncc                           shift and go to state 10
    var                            shift and go to state 11

state 118

    (52) ifs -> IF LOB NME RCB LSB lines . RSB
    (63) lines -> lines . line
    (61) line -> . stmt ;
    (1) stmt -> . vari
    (2) stmt -> . extref
    (3) stmt -> . fncd
    (4) stmt -> . importt
    (5) stmt -> . forr
    (6) stmt -> . ifs
    (7) stmt -> . fncc
    (8) stmt -> . var
    (9) stmt -> .
    (40) vari -> . NME $ = * prim
    (41) vari -> . NME $ = / prim
    (42) vari -> . NME $ = - prim
    (43) vari -> . NME $ = + prim
    (44) vari -> . NME $ = * NME
    (45) vari -> . NME $ = / NME
    (46) vari -> . NME $ = - NME
    (47) vari -> . NME $ = + NME
    (28) extref -> . EXT STR LSB args RSB
    (55) fncd -> . FNC NME LOB args RCB LSB lines RSB
    (56) fncd -> . FNC NME LOB NME RCB LSB lines RSB
    (57) fncd -> . FNC NME LOB RCB LSB lines RSB
    (58) fncd -> . FNC NME LOB RCB LSB line RSB
    (59) fncd -> . FNC NME LOB RCB LSB RSB
    (60) importt -> . USING STR
    (53) forr -> . FOR LOB fncc RCB LSB line RSB
    (54) forr -> . FOR LOB fncc RCB LSB lines RSB
    (51) ifs -> . IF LOB NME RCB LSB line RSB
    (52) ifs -> . IF LOB NME RCB LSB lines RSB
    (48) fncc -> . NME LOB args RCB
    (49) fncc -> . NME LOB prim RCB
    (50) fncc -> . NME LOB RCB
    (38) var -> . LET NME = fncc
    (39) var -> . LET NME = prim
    RSB             shift and go to state 126
    ;               reduce using rule 9 (stmt -> .)
    NME             shift and go to state 12
    EXT             shift and go to state 13
    FNC             shift and go to state 14
    USING           shift and go to state 15
    FOR             shift and go to state 16
    IF              shift and go to state 17
    LET             shift and go to state 18

    line                           shift and go to state 19
    stmt                           shift and go to state 3
    vari                           shift and go to state 4
    extref                         shift and go to state 5
    fncd                           shift and go to state 6
    importt                        shift and go to state 7
    forr                           shift and go to state 8
    ifs                            shift and go to state 9
    fncc                           shift and go to state 10
    var                            shift and go to state 11

state 119

    (56) fncd -> FNC NME LOB NME RCB LSB lines . RSB
    (63) lines -> lines . line
    (61) line -> . stmt ;
    (1) stmt -> . vari
    (2) stmt -> . extref
    (3) stmt -> . fncd
    (4) stmt -> . importt
    (5) stmt -> . forr
    (6) stmt -> . ifs
    (7) stmt -> . fncc
    (8) stmt -> . var
    (9) stmt -> .
    (40) vari -> . NME $ = * prim
    (41) vari -> . NME $ = / prim
    (42) vari -> . NME $ = - prim
    (43) vari -> . NME $ = + prim
    (44) vari -> . NME $ = * NME
    (45) vari -> . NME $ = / NME
    (46) vari -> . NME $ = - NME
    (47) vari -> . NME $ = + NME
    (28) extref -> . EXT STR LSB args RSB
    (55) fncd -> . FNC NME LOB args RCB LSB lines RSB
    (56) fncd -> . FNC NME LOB NME RCB LSB lines RSB
    (57) fncd -> . FNC NME LOB RCB LSB lines RSB
    (58) fncd -> . FNC NME LOB RCB LSB line RSB
    (59) fncd -> . FNC NME LOB RCB LSB RSB
    (60) importt -> . USING STR
    (53) forr -> . FOR LOB fncc RCB LSB line RSB
    (54) forr -> . FOR LOB fncc RCB LSB lines RSB
    (51) ifs -> . IF LOB NME RCB LSB line RSB
    (52) ifs -> . IF LOB NME RCB LSB lines RSB
    (48) fncc -> . NME LOB args RCB
    (49) fncc -> . NME LOB prim RCB
    (50) fncc -> . NME LOB RCB
    (38) var -> . LET NME = fncc
    (39) var -> . LET NME = prim
    RSB             shift and go to state 127
    ;               reduce using rule 9 (stmt -> .)
    NME             shift and go to state 12
    EXT             shift and go to state 13
    FNC             shift and go to state 14
    USING           shift and go to state 15
    FOR             shift and go to state 16
    IF              shift and go to state 17
    LET             shift and go to state 18

    line                           shift and go to state 19
    stmt                           shift and go to state 3
    vari                           shift and go to state 4
    extref                         shift and go to state 5
    fncd                           shift and go to state 6
    importt                        shift and go to state 7
    forr                           shift and go to state 8
    ifs                            shift and go to state 9
    fncc                           shift and go to state 10
    var                            shift and go to state 11

state 120

    (55) fncd -> FNC NME LOB args RCB LSB lines . RSB
    (63) lines -> lines . line
    (61) line -> . stmt ;
    (1) stmt -> . vari
    (2) stmt -> . extref
    (3) stmt -> . fncd
    (4) stmt -> . importt
    (5) stmt -> . forr
    (6) stmt -> . ifs
    (7) stmt -> . fncc
    (8) stmt -> . var
    (9) stmt -> .
    (40) vari -> . NME $ = * prim
    (41) vari -> . NME $ = / prim
    (42) vari -> . NME $ = - prim
    (43) vari -> . NME $ = + prim
    (44) vari -> . NME $ = * NME
    (45) vari -> . NME $ = / NME
    (46) vari -> . NME $ = - NME
    (47) vari -> . NME $ = + NME
    (28) extref -> . EXT STR LSB args RSB
    (55) fncd -> . FNC NME LOB args RCB LSB lines RSB
    (56) fncd -> . FNC NME LOB NME RCB LSB lines RSB
    (57) fncd -> . FNC NME LOB RCB LSB lines RSB
    (58) fncd -> . FNC NME LOB RCB LSB line RSB
    (59) fncd -> . FNC NME LOB RCB LSB RSB
    (60) importt -> . USING STR
    (53) forr -> . FOR LOB fncc RCB LSB line RSB
    (54) forr -> . FOR LOB fncc RCB LSB lines RSB
    (51) ifs -> . IF LOB NME RCB LSB line RSB
    (52) ifs -> . IF LOB NME RCB LSB lines RSB
    (48) fncc -> . NME LOB args RCB
    (49) fncc -> . NME LOB prim RCB
    (50) fncc -> . NME LOB RCB
    (38) var -> . LET NME = fncc
    (39) var -> . LET NME = prim
    RSB             shift and go to state 128
    ;               reduce using rule 9 (stmt -> .)
    NME             shift and go to state 12
    EXT             shift and go to state 13
    FNC             shift and go to state 14
    USING           shift and go to state 15
    FOR             shift and go to state 16
    IF              shift and go to state 17
    LET             shift and go to state 18

    line                           shift and go to state 19
    stmt                           shift and go to state 3
    vari                           shift and go to state 4
    extref                         shift and go to state 5
    fncd                           shift and go to state 6
    importt                        shift and go to state 7
    forr                           shift and go to state 8
    ifs                            shift and go to state 9
    fncc                           shift and go to state 10
    var                            shift and go to state 11

state 121

    (57) fncd -> FNC NME LOB RCB LSB lines RSB .
    ;               reduce using rule 57 (fncd -> FNC NME LOB RCB LSB lines RSB .)


state 122

    (58) fncd -> FNC NME LOB RCB LSB line RSB .
    ;               reduce using rule 58 (fncd -> FNC NME LOB RCB LSB line RSB .)


state 123

    (53) forr -> FOR LOB fncc RCB LSB line RSB .
    ;               reduce using rule 53 (forr -> FOR LOB fncc RCB LSB line RSB .)


state 124

    (54) forr -> FOR LOB fncc RCB LSB lines RSB .
    ;               reduce using rule 54 (forr -> FOR LOB fncc RCB LSB lines RSB .)


state 125

    (51) ifs -> IF LOB NME RCB LSB line RSB .
    ;               reduce using rule 51 (ifs -> IF LOB NME RCB LSB line RSB .)


state 126

    (52) ifs -> IF LOB NME RCB LSB lines RSB .
    ;               reduce using rule 52 (ifs -> IF LOB NME RCB LSB lines RSB .)


state 127

    (56) fncd -> FNC NME LOB NME RCB LSB lines RSB .
    ;               reduce using rule 56 (fncd -> FNC NME LOB NME RCB LSB lines RSB .)


state 128

    (55) fncd -> FNC NME LOB args RCB LSB lines RSB .
    ;               reduce using rule 55 (fncd -> FNC NME LOB args RCB LSB lines RSB .)


Conflicts:

shift/reduce conflict for NME in state 20 resolved as shift
shift/reduce conflict for EXT in state 20 resolved as shift
shift/reduce conflict for FNC in state 20 resolved as shift
shift/reduce conflict for USING in state 20 resolved as shift
shift/reduce conflict for FOR in state 20 resolved as shift
shift/reduce conflict for IF in state 20 resolved as shift
shift/reduce conflict for LET in state 20 resolved as shift
shift/reduce conflict for NME in state 21 resolved as shift
shift/reduce conflict for EXT in state 21 resolved as shift
shift/reduce conflict for FNC in state 21 resolved as shift
shift/reduce conflict for USING in state 21 resolved as shift
shift/reduce conflict for FOR in state 21 resolved as shift
shift/reduce conflict for IF in state 21 resolved as shift
shift/reduce conflict for LET in state 21 resolved as shift
shift/reduce conflict for , in state 79 resolved as shift
shift/reduce conflict for , in state 80 resolved as shift
shift/reduce conflict for , in state 81 resolved as shift
shift/reduce conflict for * in state 82 resolved as shift
shift/reduce conflict for / in state 82 resolved as shift
shift/reduce conflict for - in state 82 resolved as shift
shift/reduce conflict for + in state 82 resolved as shift
shift/reduce conflict for * in state 84 resolved as shift
shift/reduce conflict for / in state 84 resolved as shift
shift/reduce conflict for - in state 84 resolved as shift
shift/reduce conflict for + in state 84 resolved as shift
shift/reduce conflict for * in state 86 resolved as shift
shift/reduce conflict for / in state 86 resolved as shift
shift/reduce conflict for - in state 86 resolved as shift
shift/reduce conflict for + in state 86 resolved as shift
shift/reduce conflict for * in state 88 resolved as shift
shift/reduce conflict for / in state 88 resolved as shift
shift/reduce conflict for - in state 88 resolved as shift
shift/reduce conflict for + in state 88 resolved as shift
shift/reduce conflict for , in state 90 resolved as shift
shift/reduce conflict for , in state 91 resolved as shift
shift/reduce conflict for , in state 92 resolved as shift
shift/reduce conflict for , in state 93 resolved as shift
shift/reduce conflict for , in state 94 resolved as shift
shift/reduce conflict for , in state 95 resolved as shift
shift/reduce conflict for * in state 97 resolved as shift
shift/reduce conflict for / in state 97 resolved as shift
shift/reduce conflict for - in state 97 resolved as shift
shift/reduce conflict for + in state 97 resolved as shift
shift/reduce conflict for * in state 99 resolved as shift
shift/reduce conflict for / in state 99 resolved as shift
shift/reduce conflict for - in state 99 resolved as shift
shift/reduce conflict for + in state 99 resolved as shift
shift/reduce conflict for * in state 101 resolved as shift
shift/reduce conflict for / in state 101 resolved as shift
shift/reduce conflict for - in state 101 resolved as shift
shift/reduce conflict for + in state 101 resolved as shift
shift/reduce conflict for * in state 103 resolved as shift
shift/reduce conflict for / in state 103 resolved as shift
shift/reduce conflict for - in state 103 resolved as shift
shift/reduce conflict for + in state 103 resolved as shift
reduce/reduce conflict in state 20 resolved using rule stmt -> <empty>
rejected rule (lines -> line line) in state 20
reduce/reduce conflict in state 21 resolved using rule stmt -> <empty>
rejected rule (lines -> line lines) in state 21