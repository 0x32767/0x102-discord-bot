Grammar:

Rule 0     S' -> lines
Rule 1     stmt -> fncd
Rule 2     stmt -> importt
Rule 3     stmt -> forr
Rule 4     stmt -> ifs
Rule 5     stmt -> fncc
Rule 6     stmt -> var
Rule 7     stmt -> <empty>
Rule 8     prim -> NME * NME
Rule 9     prim -> NME / NME
Rule 10    prim -> NME - NME
Rule 11    prim -> NME + NME
Rule 12    prim -> prim * NME
Rule 13    prim -> prim / NME
Rule 14    prim -> prim - NME
Rule 15    prim -> prim + NME
Rule 16    prim -> NME * prim
Rule 17    prim -> NME / prim
Rule 18    prim -> NME - prim
Rule 19    prim -> NME + prim
Rule 20    prim -> prim * prim
Rule 21    prim -> prim / prim
Rule 22    prim -> prim - prim
Rule 23    prim -> prim + prim
Rule 24    prim -> NUM
Rule 25    prim -> STR
Rule 26    args -> args , args
Rule 27    args -> prim , args
Rule 28    args -> args , prim
Rule 29    args -> prim , prim
Rule 30    var -> LET NME = prim
Rule 31    fncc -> NME EXT LOB args RCB
Rule 32    fncc -> NME EXT LOB prim RCB
Rule 33    fncc -> NME EXT LOB RCB
Rule 34    fncc -> NME LOB args RCB
Rule 35    fncc -> NME LOB prim RCB
Rule 36    fncc -> NME LOB RCB
Rule 37    ifs -> IF LOB NME RCB LSB line RSB
Rule 38    ifs -> IF LOB NME RCB LSB lines RSB
Rule 39    forr -> FOR LOB fncc RCB LSB line RSB
Rule 40    forr -> FOR LOB fncc RCB LSB lines RSB
Rule 41    fncd -> FNC NME LOB RCB LSB lines RSB
Rule 42    fncd -> FNC NME LOB RCB LSB line RSB
Rule 43    importt -> USING STR
Rule 44    line -> stmt ;
Rule 45    lines -> line lines
Rule 46    lines -> lines line
Rule 47    lines -> line line

Unused terminals:

    CDL
    ARR
    DEF
    CAR
    TYP

Terminals, with rules where they appear:

*                    : 8 12 16 20
+                    : 11 15 19 23
,                    : 26 27 28 29
-                    : 10 14 18 22
/                    : 9 13 17 21
;                    : 44
=                    : 30
ARR                  : 
CAR                  : 
CDL                  : 
DEF                  : 
EXT                  : 31 32 33
FNC                  : 41 42
FOR                  : 39 40
IF                   : 37 38
LET                  : 30
LOB                  : 31 32 33 34 35 36 37 38 39 40 41 42
LSB                  : 37 38 39 40 41 42
NME                  : 8 8 9 9 10 10 11 11 12 13 14 15 16 17 18 19 30 31 32 33 34 35 36 37 38 41 42
NUM                  : 24
RCB                  : 31 32 33 34 35 36 37 38 39 40 41 42
RSB                  : 37 38 39 40 41 42
STR                  : 25 43
TYP                  : 
USING                : 43
error                : 

Nonterminals, with rules where they appear:

args                 : 26 26 27 28 31 34
fncc                 : 5 39 40
fncd                 : 1
forr                 : 3
ifs                  : 4
importt              : 2
line                 : 37 39 42 45 46 47 47
lines                : 38 40 41 45 46 0
prim                 : 12 13 14 15 16 17 18 19 20 20 21 21 22 22 23 23 27 28 29 29 30 32 35
stmt                 : 44
var                  : 6


state 0

    (0) S' -> . lines
    (45) lines -> . line lines
    (46) lines -> . lines line
    (47) lines -> . line line
    (44) line -> . stmt ;
    (1) stmt -> . fncd
    (2) stmt -> . importt
    (3) stmt -> . forr
    (4) stmt -> . ifs
    (5) stmt -> . fncc
    (6) stmt -> . var
    (7) stmt -> .
    (41) fncd -> . FNC NME LOB RCB LSB lines RSB
    (42) fncd -> . FNC NME LOB RCB LSB line RSB
    (43) importt -> . USING STR
    (39) forr -> . FOR LOB fncc RCB LSB line RSB
    (40) forr -> . FOR LOB fncc RCB LSB lines RSB
    (37) ifs -> . IF LOB NME RCB LSB line RSB
    (38) ifs -> . IF LOB NME RCB LSB lines RSB
    (31) fncc -> . NME EXT LOB args RCB
    (32) fncc -> . NME EXT LOB prim RCB
    (33) fncc -> . NME EXT LOB RCB
    (34) fncc -> . NME LOB args RCB
    (35) fncc -> . NME LOB prim RCB
    (36) fncc -> . NME LOB RCB
    (30) var -> . LET NME = prim
    ;               reduce using rule 7 (stmt -> .)
    FNC             shift and go to state 10
    USING           shift and go to state 12
    FOR             shift and go to state 13
    IF              shift and go to state 14
    NME             shift and go to state 11
    LET             shift and go to state 15

    lines                          shift and go to state 1
    line                           shift and go to state 2
    stmt                           shift and go to state 3
    fncd                           shift and go to state 4
    importt                        shift and go to state 5
    forr                           shift and go to state 6
    ifs                            shift and go to state 7
    fncc                           shift and go to state 8
    var                            shift and go to state 9

state 1

    (0) S' -> lines .
    (46) lines -> lines . line
    (44) line -> . stmt ;
    (1) stmt -> . fncd
    (2) stmt -> . importt
    (3) stmt -> . forr
    (4) stmt -> . ifs
    (5) stmt -> . fncc
    (6) stmt -> . var
    (7) stmt -> .
    (41) fncd -> . FNC NME LOB RCB LSB lines RSB
    (42) fncd -> . FNC NME LOB RCB LSB line RSB
    (43) importt -> . USING STR
    (39) forr -> . FOR LOB fncc RCB LSB line RSB
    (40) forr -> . FOR LOB fncc RCB LSB lines RSB
    (37) ifs -> . IF LOB NME RCB LSB line RSB
    (38) ifs -> . IF LOB NME RCB LSB lines RSB
    (31) fncc -> . NME EXT LOB args RCB
    (32) fncc -> . NME EXT LOB prim RCB
    (33) fncc -> . NME EXT LOB RCB
    (34) fncc -> . NME LOB args RCB
    (35) fncc -> . NME LOB prim RCB
    (36) fncc -> . NME LOB RCB
    (30) var -> . LET NME = prim
    ;               reduce using rule 7 (stmt -> .)
    FNC             shift and go to state 10
    USING           shift and go to state 12
    FOR             shift and go to state 13
    IF              shift and go to state 14
    NME             shift and go to state 11
    LET             shift and go to state 15

    line                           shift and go to state 16
    stmt                           shift and go to state 3
    fncd                           shift and go to state 4
    importt                        shift and go to state 5
    forr                           shift and go to state 6
    ifs                            shift and go to state 7
    fncc                           shift and go to state 8
    var                            shift and go to state 9

state 2

    (45) lines -> line . lines
    (47) lines -> line . line
    (45) lines -> . line lines
    (46) lines -> . lines line
    (47) lines -> . line line
    (44) line -> . stmt ;
    (1) stmt -> . fncd
    (2) stmt -> . importt
    (3) stmt -> . forr
    (4) stmt -> . ifs
    (5) stmt -> . fncc
    (6) stmt -> . var
    (7) stmt -> .
    (41) fncd -> . FNC NME LOB RCB LSB lines RSB
    (42) fncd -> . FNC NME LOB RCB LSB line RSB
    (43) importt -> . USING STR
    (39) forr -> . FOR LOB fncc RCB LSB line RSB
    (40) forr -> . FOR LOB fncc RCB LSB lines RSB
    (37) ifs -> . IF LOB NME RCB LSB line RSB
    (38) ifs -> . IF LOB NME RCB LSB lines RSB
    (31) fncc -> . NME EXT LOB args RCB
    (32) fncc -> . NME EXT LOB prim RCB
    (33) fncc -> . NME EXT LOB RCB
    (34) fncc -> . NME LOB args RCB
    (35) fncc -> . NME LOB prim RCB
    (36) fncc -> . NME LOB RCB
    (30) var -> . LET NME = prim
    ;               reduce using rule 7 (stmt -> .)
    FNC             shift and go to state 10
    USING           shift and go to state 12
    FOR             shift and go to state 13
    IF              shift and go to state 14
    NME             shift and go to state 11
    LET             shift and go to state 15

    line                           shift and go to state 17
    lines                          shift and go to state 18
    stmt                           shift and go to state 3
    fncd                           shift and go to state 4
    importt                        shift and go to state 5
    forr                           shift and go to state 6
    ifs                            shift and go to state 7
    fncc                           shift and go to state 8
    var                            shift and go to state 9

state 3

    (44) line -> stmt . ;
    ;               shift and go to state 19


state 4

    (1) stmt -> fncd .
    ;               reduce using rule 1 (stmt -> fncd .)


state 5

    (2) stmt -> importt .
    ;               reduce using rule 2 (stmt -> importt .)


state 6

    (3) stmt -> forr .
    ;               reduce using rule 3 (stmt -> forr .)


state 7

    (4) stmt -> ifs .
    ;               reduce using rule 4 (stmt -> ifs .)


state 8

    (5) stmt -> fncc .
    ;               reduce using rule 5 (stmt -> fncc .)


state 9

    (6) stmt -> var .
    ;               reduce using rule 6 (stmt -> var .)


state 10

    (41) fncd -> FNC . NME LOB RCB LSB lines RSB
    (42) fncd -> FNC . NME LOB RCB LSB line RSB
    NME             shift and go to state 20


state 11

    (31) fncc -> NME . EXT LOB args RCB
    (32) fncc -> NME . EXT LOB prim RCB
    (33) fncc -> NME . EXT LOB RCB
    (34) fncc -> NME . LOB args RCB
    (35) fncc -> NME . LOB prim RCB
    (36) fncc -> NME . LOB RCB
    EXT             shift and go to state 21
    LOB             shift and go to state 22


state 12

    (43) importt -> USING . STR
    STR             shift and go to state 23


state 13

    (39) forr -> FOR . LOB fncc RCB LSB line RSB
    (40) forr -> FOR . LOB fncc RCB LSB lines RSB
    LOB             shift and go to state 24


state 14

    (37) ifs -> IF . LOB NME RCB LSB line RSB
    (38) ifs -> IF . LOB NME RCB LSB lines RSB
    LOB             shift and go to state 25


state 15

    (30) var -> LET . NME = prim
    NME             shift and go to state 26


state 16

    (46) lines -> lines line .
    FNC             reduce using rule 46 (lines -> lines line .)
    USING           reduce using rule 46 (lines -> lines line .)
    FOR             reduce using rule 46 (lines -> lines line .)
    IF              reduce using rule 46 (lines -> lines line .)
    NME             reduce using rule 46 (lines -> lines line .)
    LET             reduce using rule 46 (lines -> lines line .)
    $end            reduce using rule 46 (lines -> lines line .)
    ;               reduce using rule 46 (lines -> lines line .)
    RSB             reduce using rule 46 (lines -> lines line .)


state 17

    (47) lines -> line line .
    (45) lines -> line . lines
    (47) lines -> line . line
    (45) lines -> . line lines
    (46) lines -> . lines line
    (47) lines -> . line line
    (44) line -> . stmt ;
    (1) stmt -> . fncd
    (2) stmt -> . importt
    (3) stmt -> . forr
    (4) stmt -> . ifs
    (5) stmt -> . fncc
    (6) stmt -> . var
    (7) stmt -> .
    (41) fncd -> . FNC NME LOB RCB LSB lines RSB
    (42) fncd -> . FNC NME LOB RCB LSB line RSB
    (43) importt -> . USING STR
    (39) forr -> . FOR LOB fncc RCB LSB line RSB
    (40) forr -> . FOR LOB fncc RCB LSB lines RSB
    (37) ifs -> . IF LOB NME RCB LSB line RSB
    (38) ifs -> . IF LOB NME RCB LSB lines RSB
    (31) fncc -> . NME EXT LOB args RCB
    (32) fncc -> . NME EXT LOB prim RCB
    (33) fncc -> . NME EXT LOB RCB
    (34) fncc -> . NME LOB args RCB
    (35) fncc -> . NME LOB prim RCB
    (36) fncc -> . NME LOB RCB
    (30) var -> . LET NME = prim
  ! reduce/reduce conflict for ; resolved using rule 7 (stmt -> .)
  ! shift/reduce conflict for FNC resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for NME resolved as shift
  ! shift/reduce conflict for LET resolved as shift
    $end            reduce using rule 47 (lines -> line line .)
    RSB             reduce using rule 47 (lines -> line line .)
    ;               reduce using rule 7 (stmt -> .)
    FNC             shift and go to state 10
    USING           shift and go to state 12
    FOR             shift and go to state 13
    IF              shift and go to state 14
    NME             shift and go to state 11
    LET             shift and go to state 15

    line                           shift and go to state 17
    lines                          shift and go to state 18
    stmt                           shift and go to state 3
    fncd                           shift and go to state 4
    importt                        shift and go to state 5
    forr                           shift and go to state 6
    ifs                            shift and go to state 7
    fncc                           shift and go to state 8
    var                            shift and go to state 9

state 18

    (45) lines -> line lines .
    (46) lines -> lines . line
    (44) line -> . stmt ;
    (1) stmt -> . fncd
    (2) stmt -> . importt
    (3) stmt -> . forr
    (4) stmt -> . ifs
    (5) stmt -> . fncc
    (6) stmt -> . var
    (7) stmt -> .
    (41) fncd -> . FNC NME LOB RCB LSB lines RSB
    (42) fncd -> . FNC NME LOB RCB LSB line RSB
    (43) importt -> . USING STR
    (39) forr -> . FOR LOB fncc RCB LSB line RSB
    (40) forr -> . FOR LOB fncc RCB LSB lines RSB
    (37) ifs -> . IF LOB NME RCB LSB line RSB
    (38) ifs -> . IF LOB NME RCB LSB lines RSB
    (31) fncc -> . NME EXT LOB args RCB
    (32) fncc -> . NME EXT LOB prim RCB
    (33) fncc -> . NME EXT LOB RCB
    (34) fncc -> . NME LOB args RCB
    (35) fncc -> . NME LOB prim RCB
    (36) fncc -> . NME LOB RCB
    (30) var -> . LET NME = prim
  ! reduce/reduce conflict for ; resolved using rule 7 (stmt -> .)
  ! shift/reduce conflict for FNC resolved as shift
  ! shift/reduce conflict for USING resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for NME resolved as shift
  ! shift/reduce conflict for LET resolved as shift
    $end            reduce using rule 45 (lines -> line lines .)
    RSB             reduce using rule 45 (lines -> line lines .)
    ;               reduce using rule 7 (stmt -> .)
    FNC             shift and go to state 10
    USING           shift and go to state 12
    FOR             shift and go to state 13
    IF              shift and go to state 14
    NME             shift and go to state 11
    LET             shift and go to state 15

    line                           shift and go to state 16
    stmt                           shift and go to state 3
    fncd                           shift and go to state 4
    importt                        shift and go to state 5
    forr                           shift and go to state 6
    ifs                            shift and go to state 7
    fncc                           shift and go to state 8
    var                            shift and go to state 9

state 19

    (44) line -> stmt ; .
    FNC             reduce using rule 44 (line -> stmt ; .)
    USING           reduce using rule 44 (line -> stmt ; .)
    FOR             reduce using rule 44 (line -> stmt ; .)
    IF              reduce using rule 44 (line -> stmt ; .)
    NME             reduce using rule 44 (line -> stmt ; .)
    LET             reduce using rule 44 (line -> stmt ; .)
    ;               reduce using rule 44 (line -> stmt ; .)
    $end            reduce using rule 44 (line -> stmt ; .)
    RSB             reduce using rule 44 (line -> stmt ; .)


state 20

    (41) fncd -> FNC NME . LOB RCB LSB lines RSB
    (42) fncd -> FNC NME . LOB RCB LSB line RSB
    LOB             shift and go to state 27


state 21

    (31) fncc -> NME EXT . LOB args RCB
    (32) fncc -> NME EXT . LOB prim RCB
    (33) fncc -> NME EXT . LOB RCB
    LOB             shift and go to state 28


state 22

    (34) fncc -> NME LOB . args RCB
    (35) fncc -> NME LOB . prim RCB
    (36) fncc -> NME LOB . RCB
    (26) args -> . args , args
    (27) args -> . prim , args
    (28) args -> . args , prim
    (29) args -> . prim , prim
    (8) prim -> . NME * NME
    (9) prim -> . NME / NME
    (10) prim -> . NME - NME
    (11) prim -> . NME + NME
    (12) prim -> . prim * NME
    (13) prim -> . prim / NME
    (14) prim -> . prim - NME
    (15) prim -> . prim + NME
    (16) prim -> . NME * prim
    (17) prim -> . NME / prim
    (18) prim -> . NME - prim
    (19) prim -> . NME + prim
    (20) prim -> . prim * prim
    (21) prim -> . prim / prim
    (22) prim -> . prim - prim
    (23) prim -> . prim + prim
    (24) prim -> . NUM
    (25) prim -> . STR
    RCB             shift and go to state 31
    NME             shift and go to state 29
    NUM             shift and go to state 33
    STR             shift and go to state 34

    args                           shift and go to state 30
    prim                           shift and go to state 32

state 23

    (43) importt -> USING STR .
    ;               reduce using rule 43 (importt -> USING STR .)


state 24

    (39) forr -> FOR LOB . fncc RCB LSB line RSB
    (40) forr -> FOR LOB . fncc RCB LSB lines RSB
    (31) fncc -> . NME EXT LOB args RCB
    (32) fncc -> . NME EXT LOB prim RCB
    (33) fncc -> . NME EXT LOB RCB
    (34) fncc -> . NME LOB args RCB
    (35) fncc -> . NME LOB prim RCB
    (36) fncc -> . NME LOB RCB
    NME             shift and go to state 11

    fncc                           shift and go to state 35

state 25

    (37) ifs -> IF LOB . NME RCB LSB line RSB
    (38) ifs -> IF LOB . NME RCB LSB lines RSB
    NME             shift and go to state 36


state 26

    (30) var -> LET NME . = prim
    =               shift and go to state 37


state 27

    (41) fncd -> FNC NME LOB . RCB LSB lines RSB
    (42) fncd -> FNC NME LOB . RCB LSB line RSB
    RCB             shift and go to state 38


state 28

    (31) fncc -> NME EXT LOB . args RCB
    (32) fncc -> NME EXT LOB . prim RCB
    (33) fncc -> NME EXT LOB . RCB
    (26) args -> . args , args
    (27) args -> . prim , args
    (28) args -> . args , prim
    (29) args -> . prim , prim
    (8) prim -> . NME * NME
    (9) prim -> . NME / NME
    (10) prim -> . NME - NME
    (11) prim -> . NME + NME
    (12) prim -> . prim * NME
    (13) prim -> . prim / NME
    (14) prim -> . prim - NME
    (15) prim -> . prim + NME
    (16) prim -> . NME * prim
    (17) prim -> . NME / prim
    (18) prim -> . NME - prim
    (19) prim -> . NME + prim
    (20) prim -> . prim * prim
    (21) prim -> . prim / prim
    (22) prim -> . prim - prim
    (23) prim -> . prim + prim
    (24) prim -> . NUM
    (25) prim -> . STR
    RCB             shift and go to state 40
    NME             shift and go to state 29
    NUM             shift and go to state 33
    STR             shift and go to state 34

    args                           shift and go to state 39
    prim                           shift and go to state 41

state 29

    (8) prim -> NME . * NME
    (9) prim -> NME . / NME
    (10) prim -> NME . - NME
    (11) prim -> NME . + NME
    (16) prim -> NME . * prim
    (17) prim -> NME . / prim
    (18) prim -> NME . - prim
    (19) prim -> NME . + prim
    *               shift and go to state 42
    /               shift and go to state 43
    -               shift and go to state 44
    +               shift and go to state 45


state 30

    (34) fncc -> NME LOB args . RCB
    (26) args -> args . , args
    (28) args -> args . , prim
    RCB             shift and go to state 46
    ,               shift and go to state 47


state 31

    (36) fncc -> NME LOB RCB .
    ;               reduce using rule 36 (fncc -> NME LOB RCB .)
    RCB             reduce using rule 36 (fncc -> NME LOB RCB .)


state 32

    (35) fncc -> NME LOB prim . RCB
    (27) args -> prim . , args
    (29) args -> prim . , prim
    (12) prim -> prim . * NME
    (13) prim -> prim . / NME
    (14) prim -> prim . - NME
    (15) prim -> prim . + NME
    (20) prim -> prim . * prim
    (21) prim -> prim . / prim
    (22) prim -> prim . - prim
    (23) prim -> prim . + prim
    RCB             shift and go to state 48
    ,               shift and go to state 49
    *               shift and go to state 50
    /               shift and go to state 51
    -               shift and go to state 52
    +               shift and go to state 53


state 33

    (24) prim -> NUM .
    RCB             reduce using rule 24 (prim -> NUM .)
    ,               reduce using rule 24 (prim -> NUM .)
    *               reduce using rule 24 (prim -> NUM .)
    /               reduce using rule 24 (prim -> NUM .)
    -               reduce using rule 24 (prim -> NUM .)
    +               reduce using rule 24 (prim -> NUM .)
    ;               reduce using rule 24 (prim -> NUM .)


state 34

    (25) prim -> STR .
    RCB             reduce using rule 25 (prim -> STR .)
    ,               reduce using rule 25 (prim -> STR .)
    *               reduce using rule 25 (prim -> STR .)
    /               reduce using rule 25 (prim -> STR .)
    -               reduce using rule 25 (prim -> STR .)
    +               reduce using rule 25 (prim -> STR .)
    ;               reduce using rule 25 (prim -> STR .)


state 35

    (39) forr -> FOR LOB fncc . RCB LSB line RSB
    (40) forr -> FOR LOB fncc . RCB LSB lines RSB
    RCB             shift and go to state 54


state 36

    (37) ifs -> IF LOB NME . RCB LSB line RSB
    (38) ifs -> IF LOB NME . RCB LSB lines RSB
    RCB             shift and go to state 55


state 37

    (30) var -> LET NME = . prim
    (8) prim -> . NME * NME
    (9) prim -> . NME / NME
    (10) prim -> . NME - NME
    (11) prim -> . NME + NME
    (12) prim -> . prim * NME
    (13) prim -> . prim / NME
    (14) prim -> . prim - NME
    (15) prim -> . prim + NME
    (16) prim -> . NME * prim
    (17) prim -> . NME / prim
    (18) prim -> . NME - prim
    (19) prim -> . NME + prim
    (20) prim -> . prim * prim
    (21) prim -> . prim / prim
    (22) prim -> . prim - prim
    (23) prim -> . prim + prim
    (24) prim -> . NUM
    (25) prim -> . STR
    NME             shift and go to state 29
    NUM             shift and go to state 33
    STR             shift and go to state 34

    prim                           shift and go to state 56

state 38

    (41) fncd -> FNC NME LOB RCB . LSB lines RSB
    (42) fncd -> FNC NME LOB RCB . LSB line RSB
    LSB             shift and go to state 57


state 39

    (31) fncc -> NME EXT LOB args . RCB
    (26) args -> args . , args
    (28) args -> args . , prim
    RCB             shift and go to state 58
    ,               shift and go to state 47


state 40

    (33) fncc -> NME EXT LOB RCB .
    ;               reduce using rule 33 (fncc -> NME EXT LOB RCB .)
    RCB             reduce using rule 33 (fncc -> NME EXT LOB RCB .)


state 41

    (32) fncc -> NME EXT LOB prim . RCB
    (27) args -> prim . , args
    (29) args -> prim . , prim
    (12) prim -> prim . * NME
    (13) prim -> prim . / NME
    (14) prim -> prim . - NME
    (15) prim -> prim . + NME
    (20) prim -> prim . * prim
    (21) prim -> prim . / prim
    (22) prim -> prim . - prim
    (23) prim -> prim . + prim
    RCB             shift and go to state 59
    ,               shift and go to state 49
    *               shift and go to state 50
    /               shift and go to state 51
    -               shift and go to state 52
    +               shift and go to state 53


state 42

    (8) prim -> NME * . NME
    (16) prim -> NME * . prim
    (8) prim -> . NME * NME
    (9) prim -> . NME / NME
    (10) prim -> . NME - NME
    (11) prim -> . NME + NME
    (12) prim -> . prim * NME
    (13) prim -> . prim / NME
    (14) prim -> . prim - NME
    (15) prim -> . prim + NME
    (16) prim -> . NME * prim
    (17) prim -> . NME / prim
    (18) prim -> . NME - prim
    (19) prim -> . NME + prim
    (20) prim -> . prim * prim
    (21) prim -> . prim / prim
    (22) prim -> . prim - prim
    (23) prim -> . prim + prim
    (24) prim -> . NUM
    (25) prim -> . STR
    NME             shift and go to state 60
    NUM             shift and go to state 33
    STR             shift and go to state 34

    prim                           shift and go to state 61

state 43

    (9) prim -> NME / . NME
    (17) prim -> NME / . prim
    (8) prim -> . NME * NME
    (9) prim -> . NME / NME
    (10) prim -> . NME - NME
    (11) prim -> . NME + NME
    (12) prim -> . prim * NME
    (13) prim -> . prim / NME
    (14) prim -> . prim - NME
    (15) prim -> . prim + NME
    (16) prim -> . NME * prim
    (17) prim -> . NME / prim
    (18) prim -> . NME - prim
    (19) prim -> . NME + prim
    (20) prim -> . prim * prim
    (21) prim -> . prim / prim
    (22) prim -> . prim - prim
    (23) prim -> . prim + prim
    (24) prim -> . NUM
    (25) prim -> . STR
    NME             shift and go to state 62
    NUM             shift and go to state 33
    STR             shift and go to state 34

    prim                           shift and go to state 63

state 44

    (10) prim -> NME - . NME
    (18) prim -> NME - . prim
    (8) prim -> . NME * NME
    (9) prim -> . NME / NME
    (10) prim -> . NME - NME
    (11) prim -> . NME + NME
    (12) prim -> . prim * NME
    (13) prim -> . prim / NME
    (14) prim -> . prim - NME
    (15) prim -> . prim + NME
    (16) prim -> . NME * prim
    (17) prim -> . NME / prim
    (18) prim -> . NME - prim
    (19) prim -> . NME + prim
    (20) prim -> . prim * prim
    (21) prim -> . prim / prim
    (22) prim -> . prim - prim
    (23) prim -> . prim + prim
    (24) prim -> . NUM
    (25) prim -> . STR
    NME             shift and go to state 64
    NUM             shift and go to state 33
    STR             shift and go to state 34

    prim                           shift and go to state 65

state 45

    (11) prim -> NME + . NME
    (19) prim -> NME + . prim
    (8) prim -> . NME * NME
    (9) prim -> . NME / NME
    (10) prim -> . NME - NME
    (11) prim -> . NME + NME
    (12) prim -> . prim * NME
    (13) prim -> . prim / NME
    (14) prim -> . prim - NME
    (15) prim -> . prim + NME
    (16) prim -> . NME * prim
    (17) prim -> . NME / prim
    (18) prim -> . NME - prim
    (19) prim -> . NME + prim
    (20) prim -> . prim * prim
    (21) prim -> . prim / prim
    (22) prim -> . prim - prim
    (23) prim -> . prim + prim
    (24) prim -> . NUM
    (25) prim -> . STR
    NME             shift and go to state 66
    NUM             shift and go to state 33
    STR             shift and go to state 34

    prim                           shift and go to state 67

state 46

    (34) fncc -> NME LOB args RCB .
    ;               reduce using rule 34 (fncc -> NME LOB args RCB .)
    RCB             reduce using rule 34 (fncc -> NME LOB args RCB .)


state 47

    (26) args -> args , . args
    (28) args -> args , . prim
    (26) args -> . args , args
    (27) args -> . prim , args
    (28) args -> . args , prim
    (29) args -> . prim , prim
    (8) prim -> . NME * NME
    (9) prim -> . NME / NME
    (10) prim -> . NME - NME
    (11) prim -> . NME + NME
    (12) prim -> . prim * NME
    (13) prim -> . prim / NME
    (14) prim -> . prim - NME
    (15) prim -> . prim + NME
    (16) prim -> . NME * prim
    (17) prim -> . NME / prim
    (18) prim -> . NME - prim
    (19) prim -> . NME + prim
    (20) prim -> . prim * prim
    (21) prim -> . prim / prim
    (22) prim -> . prim - prim
    (23) prim -> . prim + prim
    (24) prim -> . NUM
    (25) prim -> . STR
    NME             shift and go to state 29
    NUM             shift and go to state 33
    STR             shift and go to state 34

    args                           shift and go to state 68
    prim                           shift and go to state 69

state 48

    (35) fncc -> NME LOB prim RCB .
    ;               reduce using rule 35 (fncc -> NME LOB prim RCB .)
    RCB             reduce using rule 35 (fncc -> NME LOB prim RCB .)


state 49

    (27) args -> prim , . args
    (29) args -> prim , . prim
    (26) args -> . args , args
    (27) args -> . prim , args
    (28) args -> . args , prim
    (29) args -> . prim , prim
    (8) prim -> . NME * NME
    (9) prim -> . NME / NME
    (10) prim -> . NME - NME
    (11) prim -> . NME + NME
    (12) prim -> . prim * NME
    (13) prim -> . prim / NME
    (14) prim -> . prim - NME
    (15) prim -> . prim + NME
    (16) prim -> . NME * prim
    (17) prim -> . NME / prim
    (18) prim -> . NME - prim
    (19) prim -> . NME + prim
    (20) prim -> . prim * prim
    (21) prim -> . prim / prim
    (22) prim -> . prim - prim
    (23) prim -> . prim + prim
    (24) prim -> . NUM
    (25) prim -> . STR
    NME             shift and go to state 29
    NUM             shift and go to state 33
    STR             shift and go to state 34

    prim                           shift and go to state 70
    args                           shift and go to state 71

state 50

    (12) prim -> prim * . NME
    (20) prim -> prim * . prim
    (8) prim -> . NME * NME
    (9) prim -> . NME / NME
    (10) prim -> . NME - NME
    (11) prim -> . NME + NME
    (12) prim -> . prim * NME
    (13) prim -> . prim / NME
    (14) prim -> . prim - NME
    (15) prim -> . prim + NME
    (16) prim -> . NME * prim
    (17) prim -> . NME / prim
    (18) prim -> . NME - prim
    (19) prim -> . NME + prim
    (20) prim -> . prim * prim
    (21) prim -> . prim / prim
    (22) prim -> . prim - prim
    (23) prim -> . prim + prim
    (24) prim -> . NUM
    (25) prim -> . STR
    NME             shift and go to state 73
    NUM             shift and go to state 33
    STR             shift and go to state 34

    prim                           shift and go to state 72

state 51

    (13) prim -> prim / . NME
    (21) prim -> prim / . prim
    (8) prim -> . NME * NME
    (9) prim -> . NME / NME
    (10) prim -> . NME - NME
    (11) prim -> . NME + NME
    (12) prim -> . prim * NME
    (13) prim -> . prim / NME
    (14) prim -> . prim - NME
    (15) prim -> . prim + NME
    (16) prim -> . NME * prim
    (17) prim -> . NME / prim
    (18) prim -> . NME - prim
    (19) prim -> . NME + prim
    (20) prim -> . prim * prim
    (21) prim -> . prim / prim
    (22) prim -> . prim - prim
    (23) prim -> . prim + prim
    (24) prim -> . NUM
    (25) prim -> . STR
    NME             shift and go to state 75
    NUM             shift and go to state 33
    STR             shift and go to state 34

    prim                           shift and go to state 74

state 52

    (14) prim -> prim - . NME
    (22) prim -> prim - . prim
    (8) prim -> . NME * NME
    (9) prim -> . NME / NME
    (10) prim -> . NME - NME
    (11) prim -> . NME + NME
    (12) prim -> . prim * NME
    (13) prim -> . prim / NME
    (14) prim -> . prim - NME
    (15) prim -> . prim + NME
    (16) prim -> . NME * prim
    (17) prim -> . NME / prim
    (18) prim -> . NME - prim
    (19) prim -> . NME + prim
    (20) prim -> . prim * prim
    (21) prim -> . prim / prim
    (22) prim -> . prim - prim
    (23) prim -> . prim + prim
    (24) prim -> . NUM
    (25) prim -> . STR
    NME             shift and go to state 77
    NUM             shift and go to state 33
    STR             shift and go to state 34

    prim                           shift and go to state 76

state 53

    (15) prim -> prim + . NME
    (23) prim -> prim + . prim
    (8) prim -> . NME * NME
    (9) prim -> . NME / NME
    (10) prim -> . NME - NME
    (11) prim -> . NME + NME
    (12) prim -> . prim * NME
    (13) prim -> . prim / NME
    (14) prim -> . prim - NME
    (15) prim -> . prim + NME
    (16) prim -> . NME * prim
    (17) prim -> . NME / prim
    (18) prim -> . NME - prim
    (19) prim -> . NME + prim
    (20) prim -> . prim * prim
    (21) prim -> . prim / prim
    (22) prim -> . prim - prim
    (23) prim -> . prim + prim
    (24) prim -> . NUM
    (25) prim -> . STR
    NME             shift and go to state 79
    NUM             shift and go to state 33
    STR             shift and go to state 34

    prim                           shift and go to state 78

state 54

    (39) forr -> FOR LOB fncc RCB . LSB line RSB
    (40) forr -> FOR LOB fncc RCB . LSB lines RSB
    LSB             shift and go to state 80


state 55

    (37) ifs -> IF LOB NME RCB . LSB line RSB
    (38) ifs -> IF LOB NME RCB . LSB lines RSB
    LSB             shift and go to state 81


state 56

    (30) var -> LET NME = prim .
    (12) prim -> prim . * NME
    (13) prim -> prim . / NME
    (14) prim -> prim . - NME
    (15) prim -> prim . + NME
    (20) prim -> prim . * prim
    (21) prim -> prim . / prim
    (22) prim -> prim . - prim
    (23) prim -> prim . + prim
    ;               reduce using rule 30 (var -> LET NME = prim .)
    *               shift and go to state 50
    /               shift and go to state 51
    -               shift and go to state 52
    +               shift and go to state 53


state 57

    (41) fncd -> FNC NME LOB RCB LSB . lines RSB
    (42) fncd -> FNC NME LOB RCB LSB . line RSB
    (45) lines -> . line lines
    (46) lines -> . lines line
    (47) lines -> . line line
    (44) line -> . stmt ;
    (1) stmt -> . fncd
    (2) stmt -> . importt
    (3) stmt -> . forr
    (4) stmt -> . ifs
    (5) stmt -> . fncc
    (6) stmt -> . var
    (7) stmt -> .
    (41) fncd -> . FNC NME LOB RCB LSB lines RSB
    (42) fncd -> . FNC NME LOB RCB LSB line RSB
    (43) importt -> . USING STR
    (39) forr -> . FOR LOB fncc RCB LSB line RSB
    (40) forr -> . FOR LOB fncc RCB LSB lines RSB
    (37) ifs -> . IF LOB NME RCB LSB line RSB
    (38) ifs -> . IF LOB NME RCB LSB lines RSB
    (31) fncc -> . NME EXT LOB args RCB
    (32) fncc -> . NME EXT LOB prim RCB
    (33) fncc -> . NME EXT LOB RCB
    (34) fncc -> . NME LOB args RCB
    (35) fncc -> . NME LOB prim RCB
    (36) fncc -> . NME LOB RCB
    (30) var -> . LET NME = prim
    ;               reduce using rule 7 (stmt -> .)
    FNC             shift and go to state 10
    USING           shift and go to state 12
    FOR             shift and go to state 13
    IF              shift and go to state 14
    NME             shift and go to state 11
    LET             shift and go to state 15

    lines                          shift and go to state 82
    line                           shift and go to state 83
    stmt                           shift and go to state 3
    fncd                           shift and go to state 4
    importt                        shift and go to state 5
    forr                           shift and go to state 6
    ifs                            shift and go to state 7
    fncc                           shift and go to state 8
    var                            shift and go to state 9

state 58

    (31) fncc -> NME EXT LOB args RCB .
    ;               reduce using rule 31 (fncc -> NME EXT LOB args RCB .)
    RCB             reduce using rule 31 (fncc -> NME EXT LOB args RCB .)


state 59

    (32) fncc -> NME EXT LOB prim RCB .
    ;               reduce using rule 32 (fncc -> NME EXT LOB prim RCB .)
    RCB             reduce using rule 32 (fncc -> NME EXT LOB prim RCB .)


state 60

    (8) prim -> NME * NME .
    (8) prim -> NME . * NME
    (9) prim -> NME . / NME
    (10) prim -> NME . - NME
    (11) prim -> NME . + NME
    (16) prim -> NME . * prim
    (17) prim -> NME . / prim
    (18) prim -> NME . - prim
    (19) prim -> NME . + prim
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    RCB             reduce using rule 8 (prim -> NME * NME .)
    ,               reduce using rule 8 (prim -> NME * NME .)
    ;               reduce using rule 8 (prim -> NME * NME .)
    *               shift and go to state 42
    /               shift and go to state 43
    -               shift and go to state 44
    +               shift and go to state 45


state 61

    (16) prim -> NME * prim .
    (12) prim -> prim . * NME
    (13) prim -> prim . / NME
    (14) prim -> prim . - NME
    (15) prim -> prim . + NME
    (20) prim -> prim . * prim
    (21) prim -> prim . / prim
    (22) prim -> prim . - prim
    (23) prim -> prim . + prim
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    RCB             reduce using rule 16 (prim -> NME * prim .)
    ,               reduce using rule 16 (prim -> NME * prim .)
    ;               reduce using rule 16 (prim -> NME * prim .)
    *               shift and go to state 50
    /               shift and go to state 51
    -               shift and go to state 52
    +               shift and go to state 53


state 62

    (9) prim -> NME / NME .
    (8) prim -> NME . * NME
    (9) prim -> NME . / NME
    (10) prim -> NME . - NME
    (11) prim -> NME . + NME
    (16) prim -> NME . * prim
    (17) prim -> NME . / prim
    (18) prim -> NME . - prim
    (19) prim -> NME . + prim
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    RCB             reduce using rule 9 (prim -> NME / NME .)
    ,               reduce using rule 9 (prim -> NME / NME .)
    ;               reduce using rule 9 (prim -> NME / NME .)
    *               shift and go to state 42
    /               shift and go to state 43
    -               shift and go to state 44
    +               shift and go to state 45


state 63

    (17) prim -> NME / prim .
    (12) prim -> prim . * NME
    (13) prim -> prim . / NME
    (14) prim -> prim . - NME
    (15) prim -> prim . + NME
    (20) prim -> prim . * prim
    (21) prim -> prim . / prim
    (22) prim -> prim . - prim
    (23) prim -> prim . + prim
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    RCB             reduce using rule 17 (prim -> NME / prim .)
    ,               reduce using rule 17 (prim -> NME / prim .)
    ;               reduce using rule 17 (prim -> NME / prim .)
    *               shift and go to state 50
    /               shift and go to state 51
    -               shift and go to state 52
    +               shift and go to state 53


state 64

    (10) prim -> NME - NME .
    (8) prim -> NME . * NME
    (9) prim -> NME . / NME
    (10) prim -> NME . - NME
    (11) prim -> NME . + NME
    (16) prim -> NME . * prim
    (17) prim -> NME . / prim
    (18) prim -> NME . - prim
    (19) prim -> NME . + prim
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    RCB             reduce using rule 10 (prim -> NME - NME .)
    ,               reduce using rule 10 (prim -> NME - NME .)
    ;               reduce using rule 10 (prim -> NME - NME .)
    *               shift and go to state 42
    /               shift and go to state 43
    -               shift and go to state 44
    +               shift and go to state 45


state 65

    (18) prim -> NME - prim .
    (12) prim -> prim . * NME
    (13) prim -> prim . / NME
    (14) prim -> prim . - NME
    (15) prim -> prim . + NME
    (20) prim -> prim . * prim
    (21) prim -> prim . / prim
    (22) prim -> prim . - prim
    (23) prim -> prim . + prim
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    RCB             reduce using rule 18 (prim -> NME - prim .)
    ,               reduce using rule 18 (prim -> NME - prim .)
    ;               reduce using rule 18 (prim -> NME - prim .)
    *               shift and go to state 50
    /               shift and go to state 51
    -               shift and go to state 52
    +               shift and go to state 53


state 66

    (11) prim -> NME + NME .
    (8) prim -> NME . * NME
    (9) prim -> NME . / NME
    (10) prim -> NME . - NME
    (11) prim -> NME . + NME
    (16) prim -> NME . * prim
    (17) prim -> NME . / prim
    (18) prim -> NME . - prim
    (19) prim -> NME . + prim
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    RCB             reduce using rule 11 (prim -> NME + NME .)
    ,               reduce using rule 11 (prim -> NME + NME .)
    ;               reduce using rule 11 (prim -> NME + NME .)
    *               shift and go to state 42
    /               shift and go to state 43
    -               shift and go to state 44
    +               shift and go to state 45


state 67

    (19) prim -> NME + prim .
    (12) prim -> prim . * NME
    (13) prim -> prim . / NME
    (14) prim -> prim . - NME
    (15) prim -> prim . + NME
    (20) prim -> prim . * prim
    (21) prim -> prim . / prim
    (22) prim -> prim . - prim
    (23) prim -> prim . + prim
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    RCB             reduce using rule 19 (prim -> NME + prim .)
    ,               reduce using rule 19 (prim -> NME + prim .)
    ;               reduce using rule 19 (prim -> NME + prim .)
    *               shift and go to state 50
    /               shift and go to state 51
    -               shift and go to state 52
    +               shift and go to state 53


state 68

    (26) args -> args , args .
    (26) args -> args . , args
    (28) args -> args . , prim
  ! shift/reduce conflict for , resolved as shift
    RCB             reduce using rule 26 (args -> args , args .)
    ,               shift and go to state 47


state 69

    (28) args -> args , prim .
    (27) args -> prim . , args
    (29) args -> prim . , prim
    (12) prim -> prim . * NME
    (13) prim -> prim . / NME
    (14) prim -> prim . - NME
    (15) prim -> prim . + NME
    (20) prim -> prim . * prim
    (21) prim -> prim . / prim
    (22) prim -> prim . - prim
    (23) prim -> prim . + prim
  ! shift/reduce conflict for , resolved as shift
    RCB             reduce using rule 28 (args -> args , prim .)
    ,               shift and go to state 49
    *               shift and go to state 50
    /               shift and go to state 51
    -               shift and go to state 52
    +               shift and go to state 53


state 70

    (29) args -> prim , prim .
    (27) args -> prim . , args
    (29) args -> prim . , prim
    (12) prim -> prim . * NME
    (13) prim -> prim . / NME
    (14) prim -> prim . - NME
    (15) prim -> prim . + NME
    (20) prim -> prim . * prim
    (21) prim -> prim . / prim
    (22) prim -> prim . - prim
    (23) prim -> prim . + prim
  ! shift/reduce conflict for , resolved as shift
    RCB             reduce using rule 29 (args -> prim , prim .)
    ,               shift and go to state 49
    *               shift and go to state 50
    /               shift and go to state 51
    -               shift and go to state 52
    +               shift and go to state 53


state 71

    (27) args -> prim , args .
    (26) args -> args . , args
    (28) args -> args . , prim
  ! shift/reduce conflict for , resolved as shift
    RCB             reduce using rule 27 (args -> prim , args .)
    ,               shift and go to state 47


state 72

    (20) prim -> prim * prim .
    (12) prim -> prim . * NME
    (13) prim -> prim . / NME
    (14) prim -> prim . - NME
    (15) prim -> prim . + NME
    (20) prim -> prim . * prim
    (21) prim -> prim . / prim
    (22) prim -> prim . - prim
    (23) prim -> prim . + prim
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    RCB             reduce using rule 20 (prim -> prim * prim .)
    ,               reduce using rule 20 (prim -> prim * prim .)
    ;               reduce using rule 20 (prim -> prim * prim .)
    *               shift and go to state 50
    /               shift and go to state 51
    -               shift and go to state 52
    +               shift and go to state 53


state 73

    (12) prim -> prim * NME .
    (8) prim -> NME . * NME
    (9) prim -> NME . / NME
    (10) prim -> NME . - NME
    (11) prim -> NME . + NME
    (16) prim -> NME . * prim
    (17) prim -> NME . / prim
    (18) prim -> NME . - prim
    (19) prim -> NME . + prim
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    RCB             reduce using rule 12 (prim -> prim * NME .)
    ,               reduce using rule 12 (prim -> prim * NME .)
    ;               reduce using rule 12 (prim -> prim * NME .)
    *               shift and go to state 42
    /               shift and go to state 43
    -               shift and go to state 44
    +               shift and go to state 45


state 74

    (21) prim -> prim / prim .
    (12) prim -> prim . * NME
    (13) prim -> prim . / NME
    (14) prim -> prim . - NME
    (15) prim -> prim . + NME
    (20) prim -> prim . * prim
    (21) prim -> prim . / prim
    (22) prim -> prim . - prim
    (23) prim -> prim . + prim
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    RCB             reduce using rule 21 (prim -> prim / prim .)
    ,               reduce using rule 21 (prim -> prim / prim .)
    ;               reduce using rule 21 (prim -> prim / prim .)
    *               shift and go to state 50
    /               shift and go to state 51
    -               shift and go to state 52
    +               shift and go to state 53


state 75

    (13) prim -> prim / NME .
    (8) prim -> NME . * NME
    (9) prim -> NME . / NME
    (10) prim -> NME . - NME
    (11) prim -> NME . + NME
    (16) prim -> NME . * prim
    (17) prim -> NME . / prim
    (18) prim -> NME . - prim
    (19) prim -> NME . + prim
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    RCB             reduce using rule 13 (prim -> prim / NME .)
    ,               reduce using rule 13 (prim -> prim / NME .)
    ;               reduce using rule 13 (prim -> prim / NME .)
    *               shift and go to state 42
    /               shift and go to state 43
    -               shift and go to state 44
    +               shift and go to state 45


state 76

    (22) prim -> prim - prim .
    (12) prim -> prim . * NME
    (13) prim -> prim . / NME
    (14) prim -> prim . - NME
    (15) prim -> prim . + NME
    (20) prim -> prim . * prim
    (21) prim -> prim . / prim
    (22) prim -> prim . - prim
    (23) prim -> prim . + prim
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    RCB             reduce using rule 22 (prim -> prim - prim .)
    ,               reduce using rule 22 (prim -> prim - prim .)
    ;               reduce using rule 22 (prim -> prim - prim .)
    *               shift and go to state 50
    /               shift and go to state 51
    -               shift and go to state 52
    +               shift and go to state 53


state 77

    (14) prim -> prim - NME .
    (8) prim -> NME . * NME
    (9) prim -> NME . / NME
    (10) prim -> NME . - NME
    (11) prim -> NME . + NME
    (16) prim -> NME . * prim
    (17) prim -> NME . / prim
    (18) prim -> NME . - prim
    (19) prim -> NME . + prim
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    RCB             reduce using rule 14 (prim -> prim - NME .)
    ,               reduce using rule 14 (prim -> prim - NME .)
    ;               reduce using rule 14 (prim -> prim - NME .)
    *               shift and go to state 42
    /               shift and go to state 43
    -               shift and go to state 44
    +               shift and go to state 45


state 78

    (23) prim -> prim + prim .
    (12) prim -> prim . * NME
    (13) prim -> prim . / NME
    (14) prim -> prim . - NME
    (15) prim -> prim . + NME
    (20) prim -> prim . * prim
    (21) prim -> prim . / prim
    (22) prim -> prim . - prim
    (23) prim -> prim . + prim
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    RCB             reduce using rule 23 (prim -> prim + prim .)
    ,               reduce using rule 23 (prim -> prim + prim .)
    ;               reduce using rule 23 (prim -> prim + prim .)
    *               shift and go to state 50
    /               shift and go to state 51
    -               shift and go to state 52
    +               shift and go to state 53


state 79

    (15) prim -> prim + NME .
    (8) prim -> NME . * NME
    (9) prim -> NME . / NME
    (10) prim -> NME . - NME
    (11) prim -> NME . + NME
    (16) prim -> NME . * prim
    (17) prim -> NME . / prim
    (18) prim -> NME . - prim
    (19) prim -> NME . + prim
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for + resolved as shift
    RCB             reduce using rule 15 (prim -> prim + NME .)
    ,               reduce using rule 15 (prim -> prim + NME .)
    ;               reduce using rule 15 (prim -> prim + NME .)
    *               shift and go to state 42
    /               shift and go to state 43
    -               shift and go to state 44
    +               shift and go to state 45


state 80

    (39) forr -> FOR LOB fncc RCB LSB . line RSB
    (40) forr -> FOR LOB fncc RCB LSB . lines RSB
    (44) line -> . stmt ;
    (45) lines -> . line lines
    (46) lines -> . lines line
    (47) lines -> . line line
    (1) stmt -> . fncd
    (2) stmt -> . importt
    (3) stmt -> . forr
    (4) stmt -> . ifs
    (5) stmt -> . fncc
    (6) stmt -> . var
    (7) stmt -> .
    (41) fncd -> . FNC NME LOB RCB LSB lines RSB
    (42) fncd -> . FNC NME LOB RCB LSB line RSB
    (43) importt -> . USING STR
    (39) forr -> . FOR LOB fncc RCB LSB line RSB
    (40) forr -> . FOR LOB fncc RCB LSB lines RSB
    (37) ifs -> . IF LOB NME RCB LSB line RSB
    (38) ifs -> . IF LOB NME RCB LSB lines RSB
    (31) fncc -> . NME EXT LOB args RCB
    (32) fncc -> . NME EXT LOB prim RCB
    (33) fncc -> . NME EXT LOB RCB
    (34) fncc -> . NME LOB args RCB
    (35) fncc -> . NME LOB prim RCB
    (36) fncc -> . NME LOB RCB
    (30) var -> . LET NME = prim
    ;               reduce using rule 7 (stmt -> .)
    FNC             shift and go to state 10
    USING           shift and go to state 12
    FOR             shift and go to state 13
    IF              shift and go to state 14
    NME             shift and go to state 11
    LET             shift and go to state 15

    fncc                           shift and go to state 8
    line                           shift and go to state 84
    lines                          shift and go to state 85
    stmt                           shift and go to state 3
    fncd                           shift and go to state 4
    importt                        shift and go to state 5
    forr                           shift and go to state 6
    ifs                            shift and go to state 7
    var                            shift and go to state 9

state 81

    (37) ifs -> IF LOB NME RCB LSB . line RSB
    (38) ifs -> IF LOB NME RCB LSB . lines RSB
    (44) line -> . stmt ;
    (45) lines -> . line lines
    (46) lines -> . lines line
    (47) lines -> . line line
    (1) stmt -> . fncd
    (2) stmt -> . importt
    (3) stmt -> . forr
    (4) stmt -> . ifs
    (5) stmt -> . fncc
    (6) stmt -> . var
    (7) stmt -> .
    (41) fncd -> . FNC NME LOB RCB LSB lines RSB
    (42) fncd -> . FNC NME LOB RCB LSB line RSB
    (43) importt -> . USING STR
    (39) forr -> . FOR LOB fncc RCB LSB line RSB
    (40) forr -> . FOR LOB fncc RCB LSB lines RSB
    (37) ifs -> . IF LOB NME RCB LSB line RSB
    (38) ifs -> . IF LOB NME RCB LSB lines RSB
    (31) fncc -> . NME EXT LOB args RCB
    (32) fncc -> . NME EXT LOB prim RCB
    (33) fncc -> . NME EXT LOB RCB
    (34) fncc -> . NME LOB args RCB
    (35) fncc -> . NME LOB prim RCB
    (36) fncc -> . NME LOB RCB
    (30) var -> . LET NME = prim
    ;               reduce using rule 7 (stmt -> .)
    FNC             shift and go to state 10
    USING           shift and go to state 12
    FOR             shift and go to state 13
    IF              shift and go to state 14
    NME             shift and go to state 11
    LET             shift and go to state 15

    line                           shift and go to state 86
    lines                          shift and go to state 87
    stmt                           shift and go to state 3
    fncd                           shift and go to state 4
    importt                        shift and go to state 5
    forr                           shift and go to state 6
    ifs                            shift and go to state 7
    fncc                           shift and go to state 8
    var                            shift and go to state 9

state 82

    (41) fncd -> FNC NME LOB RCB LSB lines . RSB
    (46) lines -> lines . line
    (44) line -> . stmt ;
    (1) stmt -> . fncd
    (2) stmt -> . importt
    (3) stmt -> . forr
    (4) stmt -> . ifs
    (5) stmt -> . fncc
    (6) stmt -> . var
    (7) stmt -> .
    (41) fncd -> . FNC NME LOB RCB LSB lines RSB
    (42) fncd -> . FNC NME LOB RCB LSB line RSB
    (43) importt -> . USING STR
    (39) forr -> . FOR LOB fncc RCB LSB line RSB
    (40) forr -> . FOR LOB fncc RCB LSB lines RSB
    (37) ifs -> . IF LOB NME RCB LSB line RSB
    (38) ifs -> . IF LOB NME RCB LSB lines RSB
    (31) fncc -> . NME EXT LOB args RCB
    (32) fncc -> . NME EXT LOB prim RCB
    (33) fncc -> . NME EXT LOB RCB
    (34) fncc -> . NME LOB args RCB
    (35) fncc -> . NME LOB prim RCB
    (36) fncc -> . NME LOB RCB
    (30) var -> . LET NME = prim
    RSB             shift and go to state 88
    ;               reduce using rule 7 (stmt -> .)
    FNC             shift and go to state 10
    USING           shift and go to state 12
    FOR             shift and go to state 13
    IF              shift and go to state 14
    NME             shift and go to state 11
    LET             shift and go to state 15

    line                           shift and go to state 16
    stmt                           shift and go to state 3
    fncd                           shift and go to state 4
    importt                        shift and go to state 5
    forr                           shift and go to state 6
    ifs                            shift and go to state 7
    fncc                           shift and go to state 8
    var                            shift and go to state 9

state 83

    (42) fncd -> FNC NME LOB RCB LSB line . RSB
    (45) lines -> line . lines
    (47) lines -> line . line
    (45) lines -> . line lines
    (46) lines -> . lines line
    (47) lines -> . line line
    (44) line -> . stmt ;
    (1) stmt -> . fncd
    (2) stmt -> . importt
    (3) stmt -> . forr
    (4) stmt -> . ifs
    (5) stmt -> . fncc
    (6) stmt -> . var
    (7) stmt -> .
    (41) fncd -> . FNC NME LOB RCB LSB lines RSB
    (42) fncd -> . FNC NME LOB RCB LSB line RSB
    (43) importt -> . USING STR
    (39) forr -> . FOR LOB fncc RCB LSB line RSB
    (40) forr -> . FOR LOB fncc RCB LSB lines RSB
    (37) ifs -> . IF LOB NME RCB LSB line RSB
    (38) ifs -> . IF LOB NME RCB LSB lines RSB
    (31) fncc -> . NME EXT LOB args RCB
    (32) fncc -> . NME EXT LOB prim RCB
    (33) fncc -> . NME EXT LOB RCB
    (34) fncc -> . NME LOB args RCB
    (35) fncc -> . NME LOB prim RCB
    (36) fncc -> . NME LOB RCB
    (30) var -> . LET NME = prim
    RSB             shift and go to state 89
    ;               reduce using rule 7 (stmt -> .)
    FNC             shift and go to state 10
    USING           shift and go to state 12
    FOR             shift and go to state 13
    IF              shift and go to state 14
    NME             shift and go to state 11
    LET             shift and go to state 15

    line                           shift and go to state 17
    lines                          shift and go to state 18
    stmt                           shift and go to state 3
    fncd                           shift and go to state 4
    importt                        shift and go to state 5
    forr                           shift and go to state 6
    ifs                            shift and go to state 7
    fncc                           shift and go to state 8
    var                            shift and go to state 9

state 84

    (39) forr -> FOR LOB fncc RCB LSB line . RSB
    (45) lines -> line . lines
    (47) lines -> line . line
    (45) lines -> . line lines
    (46) lines -> . lines line
    (47) lines -> . line line
    (44) line -> . stmt ;
    (1) stmt -> . fncd
    (2) stmt -> . importt
    (3) stmt -> . forr
    (4) stmt -> . ifs
    (5) stmt -> . fncc
    (6) stmt -> . var
    (7) stmt -> .
    (41) fncd -> . FNC NME LOB RCB LSB lines RSB
    (42) fncd -> . FNC NME LOB RCB LSB line RSB
    (43) importt -> . USING STR
    (39) forr -> . FOR LOB fncc RCB LSB line RSB
    (40) forr -> . FOR LOB fncc RCB LSB lines RSB
    (37) ifs -> . IF LOB NME RCB LSB line RSB
    (38) ifs -> . IF LOB NME RCB LSB lines RSB
    (31) fncc -> . NME EXT LOB args RCB
    (32) fncc -> . NME EXT LOB prim RCB
    (33) fncc -> . NME EXT LOB RCB
    (34) fncc -> . NME LOB args RCB
    (35) fncc -> . NME LOB prim RCB
    (36) fncc -> . NME LOB RCB
    (30) var -> . LET NME = prim
    RSB             shift and go to state 90
    ;               reduce using rule 7 (stmt -> .)
    FNC             shift and go to state 10
    USING           shift and go to state 12
    FOR             shift and go to state 13
    IF              shift and go to state 14
    NME             shift and go to state 11
    LET             shift and go to state 15

    fncc                           shift and go to state 8
    line                           shift and go to state 17
    lines                          shift and go to state 18
    stmt                           shift and go to state 3
    fncd                           shift and go to state 4
    importt                        shift and go to state 5
    forr                           shift and go to state 6
    ifs                            shift and go to state 7
    var                            shift and go to state 9

state 85

    (40) forr -> FOR LOB fncc RCB LSB lines . RSB
    (46) lines -> lines . line
    (44) line -> . stmt ;
    (1) stmt -> . fncd
    (2) stmt -> . importt
    (3) stmt -> . forr
    (4) stmt -> . ifs
    (5) stmt -> . fncc
    (6) stmt -> . var
    (7) stmt -> .
    (41) fncd -> . FNC NME LOB RCB LSB lines RSB
    (42) fncd -> . FNC NME LOB RCB LSB line RSB
    (43) importt -> . USING STR
    (39) forr -> . FOR LOB fncc RCB LSB line RSB
    (40) forr -> . FOR LOB fncc RCB LSB lines RSB
    (37) ifs -> . IF LOB NME RCB LSB line RSB
    (38) ifs -> . IF LOB NME RCB LSB lines RSB
    (31) fncc -> . NME EXT LOB args RCB
    (32) fncc -> . NME EXT LOB prim RCB
    (33) fncc -> . NME EXT LOB RCB
    (34) fncc -> . NME LOB args RCB
    (35) fncc -> . NME LOB prim RCB
    (36) fncc -> . NME LOB RCB
    (30) var -> . LET NME = prim
    RSB             shift and go to state 91
    ;               reduce using rule 7 (stmt -> .)
    FNC             shift and go to state 10
    USING           shift and go to state 12
    FOR             shift and go to state 13
    IF              shift and go to state 14
    NME             shift and go to state 11
    LET             shift and go to state 15

    fncc                           shift and go to state 8
    line                           shift and go to state 16
    stmt                           shift and go to state 3
    fncd                           shift and go to state 4
    importt                        shift and go to state 5
    forr                           shift and go to state 6
    ifs                            shift and go to state 7
    var                            shift and go to state 9

state 86

    (37) ifs -> IF LOB NME RCB LSB line . RSB
    (45) lines -> line . lines
    (47) lines -> line . line
    (45) lines -> . line lines
    (46) lines -> . lines line
    (47) lines -> . line line
    (44) line -> . stmt ;
    (1) stmt -> . fncd
    (2) stmt -> . importt
    (3) stmt -> . forr
    (4) stmt -> . ifs
    (5) stmt -> . fncc
    (6) stmt -> . var
    (7) stmt -> .
    (41) fncd -> . FNC NME LOB RCB LSB lines RSB
    (42) fncd -> . FNC NME LOB RCB LSB line RSB
    (43) importt -> . USING STR
    (39) forr -> . FOR LOB fncc RCB LSB line RSB
    (40) forr -> . FOR LOB fncc RCB LSB lines RSB
    (37) ifs -> . IF LOB NME RCB LSB line RSB
    (38) ifs -> . IF LOB NME RCB LSB lines RSB
    (31) fncc -> . NME EXT LOB args RCB
    (32) fncc -> . NME EXT LOB prim RCB
    (33) fncc -> . NME EXT LOB RCB
    (34) fncc -> . NME LOB args RCB
    (35) fncc -> . NME LOB prim RCB
    (36) fncc -> . NME LOB RCB
    (30) var -> . LET NME = prim
    RSB             shift and go to state 92
    ;               reduce using rule 7 (stmt -> .)
    FNC             shift and go to state 10
    USING           shift and go to state 12
    FOR             shift and go to state 13
    IF              shift and go to state 14
    NME             shift and go to state 11
    LET             shift and go to state 15

    line                           shift and go to state 17
    lines                          shift and go to state 18
    stmt                           shift and go to state 3
    fncd                           shift and go to state 4
    importt                        shift and go to state 5
    forr                           shift and go to state 6
    ifs                            shift and go to state 7
    fncc                           shift and go to state 8
    var                            shift and go to state 9

state 87

    (38) ifs -> IF LOB NME RCB LSB lines . RSB
    (46) lines -> lines . line
    (44) line -> . stmt ;
    (1) stmt -> . fncd
    (2) stmt -> . importt
    (3) stmt -> . forr
    (4) stmt -> . ifs
    (5) stmt -> . fncc
    (6) stmt -> . var
    (7) stmt -> .
    (41) fncd -> . FNC NME LOB RCB LSB lines RSB
    (42) fncd -> . FNC NME LOB RCB LSB line RSB
    (43) importt -> . USING STR
    (39) forr -> . FOR LOB fncc RCB LSB line RSB
    (40) forr -> . FOR LOB fncc RCB LSB lines RSB
    (37) ifs -> . IF LOB NME RCB LSB line RSB
    (38) ifs -> . IF LOB NME RCB LSB lines RSB
    (31) fncc -> . NME EXT LOB args RCB
    (32) fncc -> . NME EXT LOB prim RCB
    (33) fncc -> . NME EXT LOB RCB
    (34) fncc -> . NME LOB args RCB
    (35) fncc -> . NME LOB prim RCB
    (36) fncc -> . NME LOB RCB
    (30) var -> . LET NME = prim
    RSB             shift and go to state 93
    ;               reduce using rule 7 (stmt -> .)
    FNC             shift and go to state 10
    USING           shift and go to state 12
    FOR             shift and go to state 13
    IF              shift and go to state 14
    NME             shift and go to state 11
    LET             shift and go to state 15

    line                           shift and go to state 16
    stmt                           shift and go to state 3
    fncd                           shift and go to state 4
    importt                        shift and go to state 5
    forr                           shift and go to state 6
    ifs                            shift and go to state 7
    fncc                           shift and go to state 8
    var                            shift and go to state 9

state 88

    (41) fncd -> FNC NME LOB RCB LSB lines RSB .
    ;               reduce using rule 41 (fncd -> FNC NME LOB RCB LSB lines RSB .)


state 89

    (42) fncd -> FNC NME LOB RCB LSB line RSB .
    ;               reduce using rule 42 (fncd -> FNC NME LOB RCB LSB line RSB .)


state 90

    (39) forr -> FOR LOB fncc RCB LSB line RSB .
    ;               reduce using rule 39 (forr -> FOR LOB fncc RCB LSB line RSB .)


state 91

    (40) forr -> FOR LOB fncc RCB LSB lines RSB .
    ;               reduce using rule 40 (forr -> FOR LOB fncc RCB LSB lines RSB .)


state 92

    (37) ifs -> IF LOB NME RCB LSB line RSB .
    ;               reduce using rule 37 (ifs -> IF LOB NME RCB LSB line RSB .)


state 93

    (38) ifs -> IF LOB NME RCB LSB lines RSB .
    ;               reduce using rule 38 (ifs -> IF LOB NME RCB LSB lines RSB .)


Conflicts:

shift/reduce conflict for FNC in state 17 resolved as shift
shift/reduce conflict for USING in state 17 resolved as shift
shift/reduce conflict for FOR in state 17 resolved as shift
shift/reduce conflict for IF in state 17 resolved as shift
shift/reduce conflict for NME in state 17 resolved as shift
shift/reduce conflict for LET in state 17 resolved as shift
shift/reduce conflict for FNC in state 18 resolved as shift
shift/reduce conflict for USING in state 18 resolved as shift
shift/reduce conflict for FOR in state 18 resolved as shift
shift/reduce conflict for IF in state 18 resolved as shift
shift/reduce conflict for NME in state 18 resolved as shift
shift/reduce conflict for LET in state 18 resolved as shift
shift/reduce conflict for * in state 60 resolved as shift
shift/reduce conflict for / in state 60 resolved as shift
shift/reduce conflict for - in state 60 resolved as shift
shift/reduce conflict for + in state 60 resolved as shift
shift/reduce conflict for * in state 61 resolved as shift
shift/reduce conflict for / in state 61 resolved as shift
shift/reduce conflict for - in state 61 resolved as shift
shift/reduce conflict for + in state 61 resolved as shift
shift/reduce conflict for * in state 62 resolved as shift
shift/reduce conflict for / in state 62 resolved as shift
shift/reduce conflict for - in state 62 resolved as shift
shift/reduce conflict for + in state 62 resolved as shift
shift/reduce conflict for * in state 63 resolved as shift
shift/reduce conflict for / in state 63 resolved as shift
shift/reduce conflict for - in state 63 resolved as shift
shift/reduce conflict for + in state 63 resolved as shift
shift/reduce conflict for * in state 64 resolved as shift
shift/reduce conflict for / in state 64 resolved as shift
shift/reduce conflict for - in state 64 resolved as shift
shift/reduce conflict for + in state 64 resolved as shift
shift/reduce conflict for * in state 65 resolved as shift
shift/reduce conflict for / in state 65 resolved as shift
shift/reduce conflict for - in state 65 resolved as shift
shift/reduce conflict for + in state 65 resolved as shift
shift/reduce conflict for * in state 66 resolved as shift
shift/reduce conflict for / in state 66 resolved as shift
shift/reduce conflict for - in state 66 resolved as shift
shift/reduce conflict for + in state 66 resolved as shift
shift/reduce conflict for * in state 67 resolved as shift
shift/reduce conflict for / in state 67 resolved as shift
shift/reduce conflict for - in state 67 resolved as shift
shift/reduce conflict for + in state 67 resolved as shift
shift/reduce conflict for , in state 68 resolved as shift
shift/reduce conflict for , in state 69 resolved as shift
shift/reduce conflict for , in state 70 resolved as shift
shift/reduce conflict for , in state 71 resolved as shift
shift/reduce conflict for * in state 72 resolved as shift
shift/reduce conflict for / in state 72 resolved as shift
shift/reduce conflict for - in state 72 resolved as shift
shift/reduce conflict for + in state 72 resolved as shift
shift/reduce conflict for * in state 73 resolved as shift
shift/reduce conflict for / in state 73 resolved as shift
shift/reduce conflict for - in state 73 resolved as shift
shift/reduce conflict for + in state 73 resolved as shift
shift/reduce conflict for * in state 74 resolved as shift
shift/reduce conflict for / in state 74 resolved as shift
shift/reduce conflict for - in state 74 resolved as shift
shift/reduce conflict for + in state 74 resolved as shift
shift/reduce conflict for * in state 75 resolved as shift
shift/reduce conflict for / in state 75 resolved as shift
shift/reduce conflict for - in state 75 resolved as shift
shift/reduce conflict for + in state 75 resolved as shift
shift/reduce conflict for * in state 76 resolved as shift
shift/reduce conflict for / in state 76 resolved as shift
shift/reduce conflict for - in state 76 resolved as shift
shift/reduce conflict for + in state 76 resolved as shift
shift/reduce conflict for * in state 77 resolved as shift
shift/reduce conflict for / in state 77 resolved as shift
shift/reduce conflict for - in state 77 resolved as shift
shift/reduce conflict for + in state 77 resolved as shift
shift/reduce conflict for * in state 78 resolved as shift
shift/reduce conflict for / in state 78 resolved as shift
shift/reduce conflict for - in state 78 resolved as shift
shift/reduce conflict for + in state 78 resolved as shift
shift/reduce conflict for * in state 79 resolved as shift
shift/reduce conflict for / in state 79 resolved as shift
shift/reduce conflict for - in state 79 resolved as shift
shift/reduce conflict for + in state 79 resolved as shift
reduce/reduce conflict in state 17 resolved using rule stmt -> <empty>
rejected rule (lines -> line line) in state 17
reduce/reduce conflict in state 18 resolved using rule stmt -> <empty>
rejected rule (lines -> line lines) in state 18